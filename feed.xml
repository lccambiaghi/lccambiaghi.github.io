<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Luca&#39;s blog</title>
    <atom:link
      href="https://lucacambiaghi.com/feed.xml"
      rel="self" type="application/rss+xml" />
    <link>https://lucacambiaghi.com</link>
    <description><![CDATA[]]></description>
    <language>en</language>
    <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
    <lastBuildDate>Wed, 26 Apr 2023 20:50:32 +0000</lastBuildDate>
    <generator>weblorg 0.1.0 (https://emacs.love/weblorg)</generator>
    <webMaster>luca.cambiaghi@me.com (Luca Cambiaghi)</webMaster>
    <image>
      <url>https://lucacambiaghi.com/favicon.png</url>
      <title>Luca&#39;s blog</title>
      <link>https://lucacambiaghi.com</link>
    </image>

    
    <item>
      <title>Integrating chatGPT into my workflow</title>
      <link>https://lucacambiaghi.com/posts/integrating-chatgpt.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/integrating-chatgpt.html</guid>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>And become exponentially more productive</strong></p>
          
          
<div id="outline-container-org6e0f9de" class="outline-2">
<h2 id="org6e0f9de">Cambrian explosion of generative AI</h2>
<div class="outline-text-2" id="text-org6e0f9de">
<p>
What a time to be alive! <code>chatgpt4</code> has just been released; <code>chatgpt3.5</code>, <code>dall-e</code>
and <code>copilot</code> are available to the general public; <code>llama.cpp</code> and
<code>alpaca.cpp</code> are being developed very fast with the promise of
democratizing large language models.
</p>

<p>
With these tools available to every programmer and data scientist,
whoever is not leveraging them will simply be left behind. It is
therefore very critical to me to become good at interfacing with these
tools. 
</p>

<p>
This means:
</p>
<ul class="org-ul">
<li>Learning how to design effective prompts</li>
<li>Learning to identify use cases when using LLMs will lead to a faster / more correct solution</li>
<li>Integrate these tools into my development environment: minimize
context switching and time to solution</li>
</ul>
</div>
</div>

<div id="outline-container-org6c2d62d" class="outline-2">
<h2 id="org6c2d62d">ChatGPT and completing code from region</h2>
<div class="outline-text-2" id="text-org6c2d62d">
<p>
OpenAI and <code>chatgpt</code> are the current leaders of this space. Trial
period and credits, great user experience, sensible answers, fast
response time.
</p>

<p>
They provide a simple API: you provide your openAI key and prompt and
they will reply with the LLM's prediction.
</p>

<p>
Let's write an <code>emacs-lisp</code> function that given the key and prompt will
return the result:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">defun</span> <span class="org-function-name">gpt-complete-str</span> (api-key prompt)
  <span class="org-doc">"Return the prompt answer from OpenAI API."</span>
  (<span class="org-keyword">let</span> ((result nil)
        (auth-value (format <span class="org-string">"Bearer %s"</span> api-key)))
    (request
      <span class="org-string">"https://api.openai.com/v1/chat/completions"</span>
      <span class="org-builtin">:type</span> <span class="org-string">"POST"</span>
      <span class="org-builtin">:data</span> (json-encode `((<span class="org-string">"prompt"</span> . ,prompt)
                           (<span class="org-string">"model"</span>  . 'gpt-3.5-turbo)))
      <span class="org-builtin">:headers</span> `((<span class="org-string">"Authorization"</span> . ,auth-value) (<span class="org-string">"Content-Type"</span> . <span class="org-string">"application/json"</span>))
      <span class="org-builtin">:sync</span> t
      <span class="org-builtin">:parser</span> 'json-read
      <span class="org-builtin">:success</span> (<span class="org-keyword">cl-function</span>
                (<span class="org-keyword">lambda</span> (<span class="org-type">&amp;key</span> data <span class="org-type">&amp;allow-other-keys</span>)
                  (<span class="org-keyword">setq</span> result (<span class="org-keyword">-&gt;&gt;</span> (elt (alist-get 'choices data) 0) (alist-get 'message (alist-get 'content))))))
      <span class="org-builtin">:error</span> (<span class="org-keyword">cl-function</span> (<span class="org-keyword">lambda</span> (<span class="org-type">&amp;rest</span> args <span class="org-type">&amp;key</span> error-thrown <span class="org-type">&amp;allow-other-keys</span>)
                            (message <span class="org-string">"Got error: %S"</span> error-thrown))))
    result))
</pre>
</div>

<p>
Small note: the code above uses an external package called <code>request</code>, which needs to be installed.
Now we simply need to write a function that takes the selected region as input and inserts chatGPT's completion.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">defun</span> <span class="org-function-name">gpt-complete-region-and-insert</span> (start end)
  <span class="org-doc">"Send the region to OpenAI and insert the result to the end of buffer. "</span>
  (<span class="org-keyword">interactive</span> <span class="org-string">"r"</span>)
  (<span class="org-keyword">let*</span> ((prompt (buffer-substring-no-properties start end))
         (messages `[((<span class="org-string">"role"</span>    . <span class="org-string">"user"</span>) (<span class="org-string">"content"</span> . ,prompt))])
         (openai-key (funcall lc/gpt-api-key-getter))
         (result (lc/gpt-complete-str openai-key messages)))
    (<span class="org-keyword">when</span> result
      (goto-char (point-max))
      (insert <span class="org-string">"\n"</span> result)
      (fill-paragraph))))
</pre>
</div>

<p>
And we are done! Let's look at a .gif to make it more tangible:
</p>

<img src="../static/img/gpt-complete.gif" alt="Completing region with ChatGPT" style="width: 100%;" />

<p>
I have taken inspiration for these functions from <a href="https://github.com/junjizhi/aide.el">this tiny package</a>.
</p>

<p>
I can easily extend the <code>gpt-complete-region-and-insert</code> to support "completion prefixes", such as:
</p>
<ul class="org-ul">
<li>"Add docstring to the following function: \n"</li>
<li>"Explain what the following code does. \n"</li>
<li>"Improve the following code. \n"</li>
</ul>

<p>
I can then interactively choose the prompt prefix when I invoke the
function and build the prompt with prefix and selected region.
</p>
</div>
</div>

<div id="outline-container-org189dfac" class="outline-2">
<h2 id="org189dfac">Chat with the model and store your prompts in org-mode</h2>
<div class="outline-text-2" id="text-org189dfac">
<p>
Apart from completing code, it can be useful to have a conversation with
<code>chatgpt</code>, where the model will take as input previous prompts and
outputs. For this purpose I can recommend the amazing <a href="https://github.com/xenodium/chatgpt-shell">chatgpt-shell
package</a>.
</p>

<p>
After <code>M-x chatgpt-shell</code> you can interact with the model in a similar
way to the official website (from the comfort of your editor) with
minimal setup. You can also interact with <code>dall-E</code> by running the
function <code>dall-e-shell</code>. I recommend watching the <code>.gif</code> in the readme.
</p>

<p>
Finally, it allows you to send query to the model via org code blocks,
which is probably my favourite feature. A <code>.gif</code> speaks for itself:
</p>

<img src="../static/img/gpt-complete-org.gif" alt="ChatGPT prompts in org-mode" style="width: 100%;" />

<p>
Here I use a keybinding to open my "prompts" file and execute the
<code>chatgpt-shell</code> code block.
</p>

<p>
This approach has two benefits:
</p>
<ul class="org-ul">
<li>I can now store my prompts and results in a plain text file.</li>
<li>I can use <code>org-mode</code> facilities to create templates.</li>
</ul>

<p>
For example I can use <code>noweb</code> and store the prompt prefix "Act as an
emacs-lisp expert." and the prompt outro "Wrap your code in a code
block. The code block should be org-mode, NOT markdown" in named
blocks. Then, my org prompt template can look like this:
</p>

<div class="org-src-container">
<pre class="src src-org"><span class="org-org-target">&lt;&lt;emacs-lisp-expert-prefix&gt;&gt;</span>
PROMPT HERE
<span class="org-org-target">&lt;&lt;org-mode-code-block-outro&gt;&gt;</span>
</pre>
</div>

<p>
I will conclude with the words generated in the above <code>.gif</code>: integrating
ChatGPT into my programming workflow has revolutionized the way I
approach problem-solving and collaboration with my team. The ease of
use and powerful natural language processing capabilities make it a
valuable addition to any programmer's toolkit.
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>Discovering org-roam</title>
      <link>https://lucacambiaghi.com/posts/discovering-org-roam.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/discovering-org-roam.html</guid>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>And good standards for personal wikis / digital gardens</strong></p>
          
          
<div id="outline-container-org107b619" class="outline-2">
<h2 id="org107b619">The problem of processing information efficiently</h2>
<div class="outline-text-2" id="text-org107b619">
<p>
I read a lot of interesting stuff every day.
New software I want to try, articles I want to read, material that I want to save for <b>future reference</b>.
</p>

<p>
I am constantly processing information and trying to internalize as much as possible.
I think it is a very critical problem in this age and of course smart software and techniques have been invented to tackle it.
</p>

<p>
I have always heard very good things about <a href="https://roamresearch.com">Roam Research</a> and its <code>emacs</code> package <a href="https://github.com/org-roam/org-roam">org-roam</a> .
Recently, <code>org-roam</code> v2 has been released and I finally had some time to play with it to see what the hype was about.
After few hours with it I already know I discovered an invaluable tool that will accompany me for life.
</p>

<p>
In this blog post I will try to explain why that is and how I use it.
</p>
</div>
</div>

<div id="outline-container-orgc6ce7e4" class="outline-2">
<h2 id="orgc6ce7e4">Roam and Zettelstalken</h2>
<div class="outline-text-2" id="text-orgc6ce7e4">
<p>
The Roam software centers around the <a href="https://en.m.wikipedia.org/wiki/Zettelkasten">Zettelkasten method</a>.
To be honest, I have read the definition multiple times without really understanding the magic behind it.
Anyway, here it is:
</p>

<blockquote>
<p>
A zettelkasten consists of many individual notes with ideas and other short pieces of information that are taken down as they occur or are acquired. The notes are numbered hierarchically, so that new notes may be inserted at the appropriate place, and contain metadata to allow the note-taker to associate notes with each other. For example, notes may contain tags that describe key aspects of the note, and they may reference other notes.
</p>

<p>
&#x2026;
</p>

<p>
The method not only allows a researcher to store and retrieve information related to their research, but also intends to enhance creativity. Cross-referencing notes through tags allows the researcher to perceive connections and relationships between individual items of information that may not be apparent in isolation.
</p>
</blockquote>

<p>
Paraphrasing with my own words, the method consists of 2 actions:
</p>
<ul class="org-ul">
<li>Capturing <b>short</b> notes with good <b>metadata</b>, which results in <b>connected</b> notes</li>
<li>Regularly inspecting notes to find not obvious connections/topics/clusters of information</li>
</ul>

<p>
I think the best way to understand what these words mean is by showing a couple of very good example implementations of this method:
</p>
<ul class="org-ul">
<li><a href="https://notes.andymatuschak.org/About_these_notes">Andy's notes</a></li>
<li><a href="https://hugocisneros.com/notes/">Hugo's notes</a></li>
</ul>

<p>
Websites like these are sometimes affectionately called "digital gardens".
Often well curated, they are a public exhibition of a person's thoughts and interests.
It is an amazing invention.
</p>

<p>
Andy has very interesting notes about effective note taking and has a beatiful website to navigate and consult his network of thoughts.
Among them, one note in particulare stroke me: <a href="https://notes.andymatuschak.org/About_these_notes?%20&amp;stackedNotes=z8QSUyNdq3CMK79KSnCW7QTR1MPHEFi4Q2LY8">Collecting material feels more useful than it actually is</a> .
This is just one of the many mind-blowing notes Andy has <b>curated</b> over the years.
</p>

<p>
I am personally guilty of accumulating interesting browser tabs, until I reach hundreds.
Then one day I set aside 2 hours to "capture" them in a <b>single</b> file with tags.
The tabs are gone, archived in a text file&#x2026; which I never open again.
The knowledge is lost, stale.
</p>

<p>
He argues that in order to internalize something we need to re-elaborate it, curate it.
We should also be able to <b>let go</b> some of these resources because they are not so precious.
Let's add action number 3 to the Zettelkasten method: improve and enrich your existing notes.
</p>

<p>
Hugo's website has an amazing visualization of his connected notes.
This is a really cool way to perform action number 2 I have outlined above.
</p>
</div>
</div>

<div id="outline-container-orgb6f13d1" class="outline-2">
<h2 id="orgb6f13d1">Personal wikis should not have a hierarchy</h2>
<div class="outline-text-2" id="text-orgb6f13d1">
<p>
I hope I managed to give a glimpse of what can be achieved with this methodology.
I talked about my ineffective method of "capturing" my browser tabs.
The second element of my method is my "org" folder, which is what I consider my personal wiki.
</p>

<p>
In this folder I have subfolders such as "personal", "work".
Maybe under work I will have subfolders such as "forecasting" or "spark".
This gives us the opportunity to discuss another important argument of the Zettelkasten method: 
notes should not have an hierarchy but structure should emerge spontaneously.
Andy has a <a href="https://notes.andymatuschak.org/About_these_notes?stackedNotes=z4SDCZQeRo4xFEQ8H4qrSqd68ucpgE6LU155C&amp;stackedNotes=z29hLZHiVt7W2uss2uMpSZquAX5T6vaeSF6Cy">beautifully written note</a> about this concept.
</p>

<p>
When I want to add something to my wiki, I don't want to worry about where to place the information (is it personal? is it work? is it machine learning or reinforcement learning?).
I capture the blog post, notes about a book, youtube video, podcast and I add metadata.
Then, smart software automates the process of creating a network of notes and visualizing it.
</p>

<p>
I just finished converting my structured wiki into an unstructured one and it works much better.
Let's make an example.
I had an org file called <code>workflow.org</code>, where I had collected information about different software I use.
One heading for <code>emacs</code>, one heading for <code>python</code>, one heading for <code>docker</code>&#x2026;
One subheading for <code>emacs</code> is <code>org-mode</code>, with all the keybindings and useful functions.
</p>

<p>
Each heading (and potentially subheading) has been turned into a node (take a look at Hugo's Notes graph).
It makes sense to have an <code>emacs</code> node, to which other nodes can refer to.
For example <code>org-mode</code> is a node referring to it.
The package <code>org-roam</code> I am about to describe is another node linking to both <code>emacs</code> and <code>org</code>.
</p>

<p>
Hierarchy is teared apart and structure emerges spontaneously.
Whenever I want to add a new note about <code>org</code>, I will just add a new node and refer to the <code>org</code> node, I don't need to care about which folder or file to write it in.
I will also connect it with more concepts, maybe with <code>evil-mode</code>.
Retrieving, inspecting and adding information is much smoother, it really is a knowledge library with a very smart librarian.
</p>
</div>
</div>

<div id="outline-container-org947978c" class="outline-2">
<h2 id="org947978c">org-roam</h2>
<div class="outline-text-2" id="text-org947978c">
<p>
I am extremly grateful to the author of <code>org-roam</code> for creating an interface to Roam that is accessible from <code>emacs</code>.
<a href="https://www.jethro.dev">Here</a> you can find his website (and blog and digital garden).
</p>

<p>
How does it work in practice?
</p>

<p>
Let's say I am reading about FIRE and I want to capture <a href="https://www.mrmoneymustache.com/2012/05/29/how-much-do-i-need-for-retirement/">this article</a> about the 4% rule.
First, I will call <code>org-roam-node-find</code> (<code>SPC n f</code>) and type the title "4% rule".
Since the node does not exist, a new one will be created.
</p>

<p>
Then, I will add a reference with <code>org-roam-add-ref</code> (<code>SPC n r</code>) and add the URL of the article.
Finally, I will write my own interpretation of the article, in which I will link to other nodes in my network with <code>org-roam-node-insert</code> (<code>SPC n i</code>), among which the "Financial Independence, Retire Early" node.
</p>

<p>
This is the resulting note/node:
</p>

<img src="../static/img/roam-4-rule.png" alt="Example note" style="width: 100%;" />

<p>
I can now <code>org-roam-node-find</code> and go to the "Financial Independence, Retire Early" node.
I then <code>org-roam-alias-add</code> to add the "FIRE" alias to the node so that it is easier to reference it.
Now nodes can reference to it also by using <code>+filetags: FIRE</code> (otherwise whitespace becomes a problem).
</p>

<p>
Finally, we can use <code>org-roam-buffer-toggle</code> (<code>SPC n b</code>) to reveal the <code>org-roam</code> buffer which shows us the backlinks, i.e. the nodes that reference the "FIRE" node.
In the screenshot below we can see 3 backlinks, which we can navigate to in an instant.
</p>

<img src="../static/img/roam-backlinks.png" alt="Example backlinks" style="width: 100%;" />

<p>
It is an amazing system, after few captures I felt right at home with a new set of standards.
The community is developing <a href="https://www.reddit.com/r/emacs/comments/onyzi8/orgroamserver_replacement_orgroamui_teaser/">a new tool</a> to visualize the connected notes, I am looking forward to it.
</p>
</div>
</div>

<div id="outline-container-org5d9abab" class="outline-2">
<h2 id="org5d9abab">Conclusion</h2>
<div class="outline-text-2" id="text-org5d9abab">
<p>
In conclusion, I am very glad I spent some time trying to understand Roam and its ecosystem.
It's only been a day so I am sure that with the time I will improve my workflow and discover mistakes and new things.
It is however impressive to see how much <code>org-roam</code> empowers you from day one.
</p>

<p>
I hope you enjoyed this blog post and please let me know in the comments if something is not clear or plain wrong.
</p>

<p>
For the attentive reader which read <a href="https://lucacambiaghi.com/posts/ipad-main-computer.html">my previous blog post</a>, yes, I am using <code>org-roam</code> from my main computer, i.e. my iPad Pro.
It works like magic!
The only "issue" is that I can't use the built-in <code>org-roam-graph</code> because I am missing the <code>graphviz</code> dependency (a kind Procursus developer is already <a href="https://github.com/ProcursusTeam/Procursus/issues/913">trying to help</a>).
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>How I turned my iPad Pro into my main computer</title>
      <link>https://lucacambiaghi.com/posts/ipad-main-computer.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/ipad-main-computer.html</guid>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>With a combination of cloud services, iOS apps and jailbreak tweaks</strong></p>
          
          
<div id="outline-container-org3aeaa9d" class="outline-2">
<h2 id="org3aeaa9d">Introduction</h2>
<div class="outline-text-2" id="text-org3aeaa9d">
<p>
I am in between jobs.
I had to return my Mac to my previous employer and I will get one from my next employer in a couple of months.
This gave me an excuse to try different workflows.
</p>

<p>
I think that in order to get creative, we must try different tools.
</p>

<p>
So I bought a second-hand 12.9" iPad Pro. It is the 3rd generation (2018), so it has FaceID and no home button (nice full-screen layout).
It has 4GB of RAM and a A12X 8-core CPU (4 low power cores and 4 normal cores). 
It has an ARM64e architecture, the same as the praised M1 chips which recently came out.
</p>

<p>
It has USB-C instead of lightning. This means I can just use my USB-C adapter and connect to my keyboard and monitor with HDMI.
When I connected it for the first time and tried to use it "docked" it was the first <b>WOW</b> moment.
</p>

<p>
Ok, what next? I came up with a bunch of challenging tasks, if the iPad could solve them all then I would admit it could be my main machine:
</p>
<ol class="org-ol">
<li><code>emacs</code> (org mode, magit, TRAMP, &#x2026;)</li>
<li>Python development (jupyter notebooks, numpy, pandas, scikit-learn, statsmodels)</li>
<li>Clojure development in Emacs (requires number 1)</li>
<li>Blog writing in Emacs (requires number 1)</li>
<li>Run a linux VM (docker, nix, &#x2026;)</li>
<li>Version control</li>
</ol>

<p>
Then some other "leisure" tasks, which would make it a pretty cool personal device:
</p>
<ol class="org-ol">
<li>Cloud gaming (with PS4 joystick)</li>
<li>Streaming files to Chromecast</li>
<li>Taking digital persistent notes (with Apple Pencil 2)</li>
</ol>

<p>
After about one month of experiments, I can say I succeeded in all of these tasks and that makes the iPad Pro a pretty damn versatile tool.
To run <code>emacs</code> you will need your iPad to be jailbreakable, which at the moment of writing means being on iOS14.3 or lower.
</p>

<p>
To do all the rest you only need Safari and iOS apps. Technology has gone that far!
</p>
</div>
</div>

<div id="outline-container-org22e85a9" class="outline-2">
<h2 id="org22e85a9">Blink Shell</h2>
<div class="outline-text-2" id="text-org22e85a9">
<p>
The very first thing you should know about is Blink Shell.
It is IMHO the best terminal app on the iOS App Store.
Some of my favourite features are:
</p>
<ul class="org-ul">
<li>Support of iOS "windows", which means essentially ability to split full screen app in 2 or more "windows"</li>
<li>Support of second monitor, so one window is on the iPad and the other in the monitor</li>
<li><a href="https://mosh.org">Mosh</a> protocol, which is a more robust SSH with slow connections</li>
</ul>

<p>
It is quite pricey if you purchase it from the store but you can also build your <code>.ipa</code> with XCode on your Mac and then install it on your iOS device for free through XCode. You can follow the tutorial <a href="https://github.com/blinksh/blink">on github</a>.
</p>

<p>
You will need to turn your Apple ID in a Developer Apple ID, which you can do for free.
Try to look at <a href="https://developer.apple.com/programs/">this Apple page</a>.
With your Dev Apple ID you can sign up to 3 apps but you have to re-sign them every 7 days.
There exist some tools like AltStore (<a href="https://altstore.io">link</a>) which resign them automatically for you.
</p>

<p>
If your device is jailbroken you can install a tweak called AppSync Unified (here a <a href="https://cydia.akemi.ai/?page/net.angelxwind.appsyncunified">link</a>).
This tweak allows you to install any valid signed IPA and it will not expire after 7 days.
You can use another tweak called Filza File Manager (here a <a href="http://cydia.saurik.com/package/com.tigisoftware.filza/">link</a>), click on the <code>.ipa</code> you built and install it.
You can send the <code>.ipa</code> from your Mac to your iPad with AirDrop for instance and from the Files app you can open with Filza (through the Share menu).
</p>

<p>
Once you have Blink, you will want to configure it so for that you run the <code>config</code> command.
From here you can add hosts to which you SSH/MOSH into.
You can also generate keys through Blink.
After setting them up you can just execute <code>ssh host</code>&#x2026;
</p>

<p>
&#x2026; which brings me to my next section.
</p>
</div>
</div>

<div id="outline-container-org3ceeee4" class="outline-2">
<h2 id="org3ceeee4">Google Cloud Platform</h2>
<div class="outline-text-2" id="text-org3ceeee4">
<p>
With the power of a good (free) terminal emulator and SSH, if you "live in your terminal" you might as well have reached happiness.
Especially because I have discovered that for the "simple" needs (like my experiments) you don't need to pay crazy amounts of money for a VM.
</p>

<p>
I signed up for the Google Cloud Platform trial period and I was awared 300$ of credit to try products.
The most obvious product to try out in this setting is Google Compute Engine (GCE), where you can spin up a VM.
It is very easy, you can configure CPU and RAM according to your requirements.
Once you have your VM, you can just SSH from Blink and you are back to your comfort zone.
</p>

<p>
There is another Google Cloud feature I discovered, Google Cloud Shell.
When you are in the Google Cloud console, you can just click on the "terminal" icon on the top right.
It will "provision your Google Cloud Shell machine" for you and once loaded you have a shell running in your browser, connected to a small VM (I believe 1.7GB RAM, 0.2 CPU and 5GB of storage, BUT STILL!).
</p>

<p>
In the same bottom window you can tap/click on "Open Editor" and that will open a new window with the Theia web editor:
</p>

<img src="../static/img/theia-screenshot.png" alt="Theia cloud editor" style="width: 100%;" />

<p>
Theia is quite similar to VSCode so now we are coding in our browser, for free.
It comes pre-installed with Python, Go, Java and others.
You can also install most UNIX tools.
</p>

<p>
It comes with 5GB of storage if you save data in your <code>$HOME</code> directory.
They even have a "Boost Mode" which will give you a better CPU and 3.4GB of RAM.
This mode has reasonable monthly limits so you can enable it when you need it.
</p>
</div>
</div>

<div id="outline-container-org70e8c10" class="outline-2">
<h2 id="org70e8c10">code-server</h2>
<div class="outline-text-2" id="text-org70e8c10">
<p>
If you find the Theia editor is a bit limited for your use case you can even run "proper VSCode" thanks to the <a href="https://github.com/cdr/code-server">code-server project</a>. 
Proper VSCode means it is the same UI and you can install (most) extensions.
</p>

<p>
In the Google Cloud Shell you can install it with:
</p>
<div class="org-src-container">
<pre class="src src-shell">curl -fsSL https://code-server.dev/install.sh | sh -s -- --method=standalone
</pre>
</div>

<p>
Then we need to configure it. First we run:
</p>
<div class="org-src-container">
<pre class="src src-shell">sudo chown USERNAME .local/share/code-server
</pre>
</div>

<p>
And write to <code>~/.config/code-server/config.yml</code>:
</p>
<div class="org-src-container">
<pre class="src src-yaml">bind-addr: 127.0.0.1:5000
auth: none
cert: false
</pre>
</div>

<p>
And finally you can start the server with <code>code-server</code>.
Then you just "click" on the address in the output of the command and that will open a new tab with VSCode running in your browser, for free.
</p>

<img src="../static/img/code-server-screenshot.png" alt="code-server running on Cloud Shell" style="width: 100%;" />

<p>
You can install <code>code-server</code> on any GCE VM, you just need to create a firewall rule: Firewall -&gt; New firewall rule -&gt; 0.0.0.0/0 -&gt; tcp, 5000, allow.
You might need to change the command to <code>code-server --host 0.0.0.0</code>.
</p>
</div>
</div>

<div id="outline-container-org3de3417" class="outline-2">
<h2 id="org3de3417">iOS apps for local Python development</h2>
<div class="outline-text-2" id="text-org3de3417">
<p>
Alright, cloud development is fun.
What if we are without internet?
What can we do anything with this device's resources?
</p>

<p>
As mentioned in the Introduction, it has an 8-core CPU and 4GB of RAM.
As it turns out, smart people have developed cool iOS apps which let you do Python development on device.
</p>

<p>
This sounds obvious but it is actually quite hard.
Since apps in iOS are sandboxed, they cannot access any command line tool so devs have to package a python interpreter AND associated modules in the app.
If you want to use <code>numpy</code> and friends you will need to package a C compiler, if you want to use <code>scipy</code> a Fortran compiler as well.
</p>

<p>
There are two projects I want to highlight.
They are both open source on Github, which is amazing.
</p>
</div>

<div id="outline-container-orgda07431" class="outline-3">
<h3 id="orgda07431">Jupyter Notebooks</h3>
<div class="outline-text-3" id="text-orgda07431">
<p>
The first is Carnets (<a href="https://apps.apple.com/it/app/carnets-jupyter-with-scipy/id1559497253?l=en">App Store link</a>), which is a fully functioning Jupyter Notebook frontend.
It is packaged with all C and Fortran dependencies you need and it is completely free.
Props to the amazing developer Nicholas Holzschuch.
</p>

<p>
By the way, he is also the developer of another incredible app called a-Shell (<a href="https://apps.apple.com/it/app/a-shell/id1473805438?l=en">App Store link</a>), which packages Python, <code>vim</code> (!), <code>git</code> (!!!) <code>LaTeX</code> (!!!!) and others.
</p>

<p>
Another interesting Jupyter Notebook option (however here we go back to the "cloud" situation) is <a href="https://gradient.paperspace.com">Paperspace Gradient</a>, which gives you a nice browser environment and free GPU.
Google Colab is a similat alternative.
I like Carnets because it has the familiar Jupyter Notebook UI and keyboard shortcuts, so I am productive from minute 1.
</p>
</div>
</div>

<div id="outline-container-org849773c" class="outline-3">
<h3 id="org849773c">Scripting and project</h3>
<div class="outline-text-3" id="text-org849773c">
<p>
The second app I want to recommend is called Pyto (<a href="https://apps.apple.com/it/app/pyto-python-3/id1436650069?l=en">App Store link</a>) and it is a fully functioning IDE.
You can navigate a Python project's codebase, execute scripts, DEBUG them!
</p>

<p>
It also comes packaged with the data science dependencies you need and you can <code>pip install</code> pure Python packages (e.g. <code>joblib</code>).
</p>

<p>
Pyto has a 3 days trial after which you are prompted for an in-app purchase.
I personally did not purchase it because I have access to a better IDE.
Depending on your needs, you may want to purchase it.
</p>
</div>
</div>
</div>

<div id="outline-container-orgd6ee6b4" class="outline-2">
<h2 id="orgd6ee6b4">Jailbreak tweaks and Procursus bootstrap</h2>
<div class="outline-text-2" id="text-orgd6ee6b4">
<p>
We have come to the more advanced section of the article.
I bought the iPad without expecting to jailbreak it.
I was lucky and got it on iOS 14.2, for which a stable jailbreak had been released.
</p>

<p>
I have been out of the JB scene for a while, my latest "serious" attempt at jailbreak was when I purchased my iPhone X. 
I checked its serial number to be sure it came out with a jailbreakable iOS version.
That was iOS 11.
The most annoying part of the jailbreak is that some apps have JB detection and when I could not bypass them I just gave it up.
</p>

<p>
Having it on the iPad made a lot of sense for this experiment, to see "what more it gives".
For the uninitiated, JB allows you to install extensions (called tweaks) which can:
</p>
<ul class="org-ul">
<li>Modify/toggle iOS system features (e.g. enable App Library on iPadOS14 or enable SplitView for all apps)</li>
<li>Modify iOS apps (e.g. remove ads from YouTube)</li>
<li>Add new features (e.g. full access to filesystem and Darwin tooling)</li>
</ul>

<p>
Tweak development is done in C++ with a tool called <code>theos</code> (<a href="https://iphonedev.wiki/index.php/Theos/Setup">tutorial to set it up</a>).
To develop tweaks you need to learn about iOS Reverse Engineering.
Tweaks "hook" into iOS methods and extend/override them.
</p>

<p>
You then compile tweaks into <code>.deb</code> files, which are distrbuted with <code>APT</code> repositories.
Users install tweaks with package managers (which are <code>dpkg</code> frontends), such as the popular Cydia or the newer Sileo.
</p>

<p>
I jailbroke with <a href="https://taurine.app/">Taurine</a> and while getting up to speed with the JB scene I stumbled upon a community of very smart (and young!) developers with an amazing project: port the useful UNIX toolchain to the iOS universe.
</p>

<p>
The project is called Procursus (<a href="https://github.com/ProcursusTeam/Procursus">github</a>) and it is a collection of Makefiles which compile tools like <code>git</code>, <code>clang</code>, <code>cmake</code>, &#x2026; into <code>.deb</code> files which can be installed on your iOS device.
Amazing.
</p>

<p>
You can install <code>openSSH</code> and SSH into <code>localhost</code> (with Blink for example).
You can then run whatever CLI tool you installed with Procursus.
Ported tooling is growing by the day and the community is super helpful.
I requested Emacs and an amazing developer just compiled a <code>.deb</code> for me and shared it on Github.
</p>
</div>
</div>

<div id="outline-container-org2f888a6" class="outline-2">
<h2 id="org2f888a6">Emacs on iPad</h2>
<div class="outline-text-2" id="text-org2f888a6">
<p>
So we come to the final section: Emacs on iPad.
The very first challenging task I listed in the Introduction.
</p>

<p>
I am currently writing my blog from my iPad, with <code>emacs</code> and <code>org-mode</code>.
That was challenge number 4 on my list.
I just run <code>emacs --script publish.el</code> and preview the HTML files with Filza, the file manager that every iOS user deserves.
</p>

<p>
The Procursus repo has <code>openjdk</code> and <code>openjre</code> so this morning I simply installed <code>clojure</code> following the install instructions.
I could run it from <code>org-mode</code> with org-babel without setup.
I am happy I am now starting to get a return on the investment of learning <code>emacs</code>.
I have achieved good portability and composability of my tools.
</p>

<p>
Not everything is gold, though: one issue I have is that the packaged <code>emacs</code> is the terminal version (which I had never used before).
There is some incompatibility with <code>xterm</code> so I only have 8 colors.
I had to spend some time tweaking a theme, which made me realize I don't NEED so many colors.
</p>

<img src="../static/img/emacs-on-ipad.png" alt="Theia cloud editor" style="width: 100%;" />

<p>
I also adapted my <code>.emacs</code> to behave differently if I am on iPadOS.
This is useful because there are some modules of my configuration which I know I will not run.
To see my configuration just click on the "emacs" link in the top right of this blog (obviously now the config is redacted, version controlled and rendered from my main computer: the iPad).
</p>
</div>
</div>

<div id="outline-container-org857ed6a" class="outline-2">
<h2 id="org857ed6a">iOS advanced features</h2>
<div class="outline-text-2" id="text-org857ed6a">
<p>
My final section will be about some advanced features I discovered in iPadOS with time.
I think mastering these is absolutely necessary if you want to be productive with this device.
</p>

<p>
The first step is getting familiar with iPadOS multitasking.
You start by running an app in full screen (e.g. Blink with an <code>emacs</code> instance running).
You then invoke Spotlight (CMD+space) and write Safari.
You then drag and drop the icon to the right.
</p>

<p>
The first option is SplitView, by which the screen is vertically split in two "windows".
The second option is SlideOver, where Safari takes a third of the screen and "overlays" the full screen app.
You can then "swipe away" the SlideOver app to the right, continue working, "swipe it in" again from the right to check another website.
</p>

<p>
You can open multiple apps in Slideover, let's say for example you also drag Mail to the SlideOver location.
If you then drag from the bottom of the app, hold for a sec and release (the gesture to invoke multitasking) you have access to both apps in SlideOver.
You can close the ones you don't need anymore.
</p>

<p>
Sorry for not posting screenshots, there are already many great resources to learn iPadOS features.
I recommend <a href="https://www.macstories.net/stories/beyond-the-tablet/7/">this MacStories article</a> for example.
</p>

<p>
To be frank, I hate that you have to drag and drop to control multitasking.
iOS15 will improve this by providing more keyboard shortcuts so that you don't have to touch the screen at all.
I am currently looking into a tweak called <code>zxtouch</code> (<a href="https://github.com/xuan32546/IOS13-SimulateTouch">here Github link</a>) which can simulate touch events so I plan to record this touch interactions and play them with a keyboard key.
</p>

<p>
I will close the section with a very hidden feature of iOS which is supposed to help control the iPad with the keyboard.
This is called Full Keyboard Access and you can access it with Settings -&gt; Accessibility -&gt; Keyboard.
When you enable it, you can navigate all iOS menus (e.g. Settings) with the keyboard.
</p>

<p>
You navigate with arrows, tap with space.
You have access to common gestures with the TAB prefix, for example TAB+A invokes the app switcher.
My experience with FKA has been a bit lacking though, what I really need are the shortcuts for multitasking.
Maybe some tweak developer can port the iOS15 keyboard shortcuts.
</p>
</div>
</div>

<div id="outline-container-org2c63f25" class="outline-2">
<h2 id="org2c63f25">Conclusion</h2>
<div class="outline-text-2" id="text-org2c63f25">
<p>
Wow, it has been quite a long article, thank you for following to the end!
In conclusion this iPad is an amazing device and it can do most if not all of what I need for personal projects.
It can also do more things than what my Mac could not do.
</p>

<p>
I can draw and take notes with Apple Pencil.
I can play iOS games not available for macOS, as well as iOS apps which offer advantages over web apps (e.g. Netflix allowing offline downloads).
</p>

<p>
This being said, I will get a Mac from my next employer and I will use it over the iPad every day.
Working from an actual laptop is just more efficient, in particular multitasking and window tiling software (I use Amethyst).
I would also hit the limit of 4GB of RAM all the time when doing serious python development.
</p>

<p>
Nonetheless, I think I have demonstrated that an iPad is more than enough for personal projects.
This "cloud" movement is exciting and I believe it is the future.
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>My simple org mode system</title>
      <link>https://lucacambiaghi.com/posts/org-gtd.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/org-gtd.html</guid>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>And how to receive notifications and capture ideas from iPhone</strong></p>
          
          
<div id="outline-container-org0cddca9" class="outline-2">
<h2 id="org0cddca9">Organize your life</h2>
<div class="outline-text-2" id="text-org0cddca9">
<p>
Org mode has so many useful features, in this year of Emacs I integrated the following in my life:
</p>
<ul class="org-ul">
<li>Literate emacs configuration (you can see the HTMl export of mine <a href="https://lucacambiaghi.com/vanilla-emacs/readme.html">here</a> )</li>
<li>Literate programming (explained in <a href="https://lucacambiaghi.com/posts/think-stats.html">this previous blog post</a>)</li>
<li>Publish a static blog (explained in <a href="https://lucacambiaghi.com/posts/weblorg.html">this previous blog post</a>)</li>
<li>Knowledge library</li>
<li>Task management</li>
</ul>

<p>
In this post I will focus on the GTD (Getting Things Done) org facilities and how I interface with them.
</p>

<p>
The first org mode abstraction is an headline with a TODO  status.
The first natural step is then to create an org file (e.g. <code>todos.org</code>) where we can monitor our TODO headings.
When we complete one, we set it to DONE and archive it with <code>org-archive-subtree</code>.
</p>

<p>
Example file:
</p>
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-level-1">* </span><span class="org-org-level-1"><span class="org-org-todo">TODO</span></span><span class="org-org-level-1"> finish to write slides </span>
<span class="org-org-level-1">* </span><span class="org-org-level-1"><span class="org-org-done">DONE</span></span><span class="org-org-level-1"> </span><span class="org-org-level-1"><span class="org-org-headline-done">add docs</span></span><span class="org-org-level-1"> </span>
</pre>
</div>

<p>
This all sounds great, except..
</p>
<ol class="org-ol">
<li>I don't know what tasks are important</li>
<li>I forget to check the file for days, also forgetting tasks</li>
<li>I am not good at capturing my tasks in this file during my day.</li>
</ol>

<p>
Solving any of these 3 problems is useless, we need to solve all three of them.
</p>

<p>
Problem 1. is solved by scheduling a task.
You commit to do a task on a certain day (e.g. today, or tomorrow. Why wait?) and you execute <code>org-schedule</code> on that heading.
</p>

<div class="org-src-container">
<pre class="src src-org"> * TODO finish to write slides 
<span class="org-org-special-keyword">SCHEDULED:</span> <span class="org-org-date">&lt;2021-03-02 Tue&gt;</span>
 * DONE add docs 
</pre>
</div>

<p>
This leads to the next big org abstraction, the agenda!
When you call <code>org-agenda-list</code> you will see all the <b>scheduled</b> TODOs for the week (including the task you just scheduled for today).
This is now your <i>agenda</i>, it would be great to follow it and to complete the tasks that you have just marked as important!
</p>

<p>
Let's tackle problem 2. by introducing habits!! Let's say we want to check our <code>todos.org</code> every 3 days?
Then we can mark it as an habit:
</p>
<div class="org-src-container">
<pre class="src src-org"> * TODO finish to write slides 
<span class="org-org-special-keyword">SCHEDULED:</span> <span class="org-org-date">&lt;2021-01-24 Tue&gt;</span>
 * DONE add docs 
 * TODO Check todos.org (start with #inbox)
<span class="org-org-special-keyword">SCHEDULED:</span> <span class="org-org-date">&lt;2021-01-24 Sun .+2d/4d&gt;</span>
<span class="org-org-drawer">:PROPERTIES:</span>
<span class="org-org-special-keyword">:STYLE:</span>    <span class="org-org-property-value">habit</span>
<span class="org-org-special-keyword">:LAST_REPEAT:</span> <span class="org-org-date">[2021-01-22 Fri 18:08]</span>
<span class="org-org-drawer">:END:</span>
- State "DONE"       from "TODO"       <span class="org-org-date">[2021-01-22 Fri 18:08]</span>
- State "DONE"       from "TODO"       <span class="org-org-date">[2021-01-18 Mon 20:53]</span>
- State "DONE"       from "TODO"       <span class="org-org-date">[2021-01-17 Sun 21:40]</span>
</pre>
</div>

<p>
Now it will be scheduled in the agenda once every 3 days..
Now, if we only weren't so bad at checking our agendas&#x2026;
</p>
</div>
</div>

<div id="outline-container-orga4977a7" class="outline-2">
<h2 id="orga4977a7">Show agenda in emacs-dashboard</h2>
<div class="outline-text-2" id="text-orga4977a7">
<p>
In the previous section we introduced the fundamental blocks of org GTD system: scheduled
tasks, habits and the agenda.
</p>

<p>
I use the <code>dashboard</code> package so that my first buffer is a "dashboard" which provides
a quick access to weekly agenda and my next tasks.
</p>
<img src="../static/img/dashboard-agenda.png" alt="Dashboard with agenda section" style="margin:auto; width:80%;" />

<p>
Here is my configuration for the package (you can read the up-to-date configuration <a href="https://lucacambiaghi.com/vanilla-emacs/readme.html#h:2F4C0A6C-96BE-4818-B794-D1593C23FB00">here</a>):
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">use-package</span> <span class="org-constant">dashboard</span>
  <span class="org-builtin">:demand</span>
  <span class="org-builtin">:init</span>
  (<span class="org-keyword">setq</span> initial-buffer-choice (<span class="org-keyword">lambda</span> () (get-buffer <span class="org-string">"*dashboard*"</span>)))
  (<span class="org-keyword">setq</span> dashboard-center-content t)
  (<span class="org-keyword">setq</span> dashboard-projects-backend 'projectile)
  (<span class="org-keyword">setq</span> dashboard-set-heading-icons t)
  (<span class="org-keyword">setq</span> dashboard-set-file-icons t)
  (<span class="org-keyword">setq</span> dashboard-banner-logo-title nil)
  (<span class="org-keyword">setq</span> dashboard-set-footer nil)
  (<span class="org-keyword">setq</span> dashboard-set-navigator t)
  (<span class="org-keyword">defun</span> <span class="org-function-name">lc/is-after-17-or-weekends?</span> ()
    (<span class="org-keyword">or</span> (<span class="org-keyword">-&gt;</span> (nth 3 (split-string (current-time-string) <span class="org-string">" "</span>)) <span class="org-comment-delimiter">; </span><span class="org-comment">time of the day e.g. 18</span>
            (substring 0 2)
            (string-to-number)
            (&gt; 16))
        (<span class="org-keyword">-&gt;</span> (substring (current-time-string) 0 3) <span class="org-comment-delimiter">; </span><span class="org-comment">day of the week e.g. Fri</span>
            (member  '(<span class="org-string">"Sat"</span> <span class="org-string">"Sun"</span>)))))
  <span class="org-comment-delimiter">;; </span><span class="org-comment">exclude work items after 17 and on weekends</span>
  (run-at-time <span class="org-string">"00:00"</span> (* 60 60 24)
               (<span class="org-keyword">lambda</span> ()
                 (<span class="org-keyword">if</span> (lc/is-after-17-or-weekends?)
                     (<span class="org-keyword">setq</span> dashboard-match-agenda-entry <span class="org-string">"life|habits"</span>
                           dashboard-match-next-entry <span class="org-string">"TODO=\"NEXT\"-work"</span>)
                   (<span class="org-keyword">setq</span> dashboard-match-agenda-entry <span class="org-string">"work|life|habits"</span>
                         dashboard-match-next-entry <span class="org-string">"TODO=\"NEXT\""</span>))))
        <span class="org-comment-delimiter">;; </span><span class="org-comment">buttons above agenda</span>
  (<span class="org-keyword">setq</span> dashboard-navigator-buttons
        `((<span class="org-comment-delimiter">;; </span><span class="org-comment">Github</span>
           (,(all-the-icons-octicon <span class="org-string">"mark-github"</span> <span class="org-builtin">:height</span> 1.1 <span class="org-builtin">:v-adjust</span> 0.0)
            <span class="org-string">"Github"</span>
            <span class="org-string">"Go to wondercast"</span>
            (<span class="org-keyword">lambda</span> (<span class="org-type">&amp;rest</span> _) (browse-url <span class="org-string">"https://github.com/Maersk-Global/wondercast"</span>)))
           <span class="org-comment-delimiter">;; </span><span class="org-comment">Codebase</span>
           (,(all-the-icons-faicon <span class="org-string">"briefcase"</span> <span class="org-builtin">:height</span> 1.1 <span class="org-builtin">:v-adjust</span> -0.1)
            <span class="org-string">"JIRA"</span>
            <span class="org-string">"Go to Kanban"</span>
            (<span class="org-keyword">lambda</span> (<span class="org-type">&amp;rest</span> _) (browse-url <span class="org-string">"https://jira.maerskdev.net/secure/RapidBoard.jspa?rapidView=6378&amp;projectKey=AVOC&amp;quickFilter=15697"</span>)))
           <span class="org-comment-delimiter">;; </span><span class="org-comment">Perspectives</span>
           (,(all-the-icons-octicon <span class="org-string">"history"</span> <span class="org-builtin">:height</span> 1.1 <span class="org-builtin">:v-adjust</span> 0.0)
            <span class="org-string">"Restore"</span>
            <span class="org-string">"Restore"</span>
            (<span class="org-keyword">lambda</span> (<span class="org-type">&amp;rest</span> _) (persp-state-load persp-state-default-file)))
           )))
  <span class="org-comment-delimiter">;; </span><span class="org-comment">show next tasks in dashboard</span>
  (<span class="org-keyword">defun</span> <span class="org-function-name">lc/dashboard-get-next</span> ()
    <span class="org-doc">"Get agenda items for today or for a week from now."</span>
    (org-compile-prefix-format 'agenda)
    (org-map-entries 'dashboard-agenda-entry-format
                     dashboard-match-next-entry
                     'agenda))
  (<span class="org-keyword">defun</span> <span class="org-function-name">lc/dashboard-insert-next</span> (list-size)
    <span class="org-doc">"Add the list of LIST-SIZE items of next tasks"</span>
    (<span class="org-keyword">require</span> '<span class="org-constant">org-agenda</span>)
    (<span class="org-keyword">let</span> ((next (lc/dashboard-get-next)))
      (dashboard-insert-section
       <span class="org-string">"Next tasks"</span>
       next
       list-size
       <span class="org-string">"n"</span>
       `(<span class="org-keyword">lambda</span> (<span class="org-type">&amp;rest</span> ignore)
          (<span class="org-keyword">let</span> ((buffer (find-file-other-window (nth 2 ',el))))
            (<span class="org-keyword">with-current-buffer</span> buffer
              (goto-char (nth 1 ',el))
              (switch-to-buffer buffer))))
       (format <span class="org-string">"%s"</span> (nth 0 el)))))
  <span class="org-builtin">:config</span>
  (dashboard-setup-startup-hook)
  (set-face-attribute 'dashboard-items-face nil <span class="org-builtin">:height</span> (lc/get-font-size))
  <span class="org-comment-delimiter">;; </span><span class="org-comment">show next tasks in dashboard</span>
  (add-to-list 'dashboard-item-generators  '(next . lc/dashboard-insert-next))
  (<span class="org-keyword">setq</span> dashboard-items '((agenda . 5)
                          (next . 5)
                          (projects . 5))))
</pre>
</div>

<p>
There are a few useful features here:
</p>
<ul class="org-ul">
<li>Show weekly agenda, i.e. tasks that I have scheduled for the coming week.</li>
<li>Filter agenda items according to time of day and day of week. Today is Sunday so in the screenshot you don't see my work tasks.</li>
<li>Show "NEXT" unscheduled tasks. Think of these tasks as your backlog, the next tasks you should schedule.</li>
<li>BONUS: nice buttons that brings you to a website or restore the latest session (if you want to know more about this one, read <a href="https://lucacambiaghi.com/vanilla-emacs/readme.html#h:6E4E5BD6-1930-4DCE-8E26-5ADAC2B9A152">here</a>).</li>
</ul>

<p>
The dashboard is the reminder to myself about my tasks.
When I start up Emacs, I will find my tasks staring right at me.
If I am in a good mood, I will review my <code>todo.org</code> file, schedule some more, put some to "DONE".
</p>
</div>
</div>

<div id="outline-container-org637392b" class="outline-2">
<h2 id="org637392b">Categorize tasks</h2>
<div class="outline-text-2" id="text-org637392b">
<p>
As mentioned, I keep all my tasks in one file called <code>todo.org</code>, which is included in my <code>org-agenda-files</code>.
</p>

<p>
I categorize my tasks in "projects".
Two example projects are "Life" and "Work".
</p>

<p>
Each project is then categorized in subprojects.
An example subproject for "Work" could be a user story I am working on.
For a subproject I would have individual headings corresponding to tasks.
</p>

<p>
Here a practical example:
</p>
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-level-1">* Work </span><span class="org-org-level-1"><span class="org-org-checkbox-statistics-todo">[0/2]</span></span>
<span class="org-org-drawer">:PROPERTIES:</span>
<span class="org-org-special-keyword">:COOKIE_DATA:</span> <span class="org-org-property-value">todo recursive</span>
<span class="org-org-special-keyword">:CATEGORY:</span> <span class="org-org-property-value">work</span>
<span class="org-org-drawer">:END:</span>
<span class="org-org-level-2">** Recursive least squares model </span><span class="org-org-level-2"><span class="org-org-checkbox-statistics-todo">[0/2]</span></span>
<span class="org-org-level-3">*** </span><span class="org-org-level-3"><span class="org-org-todo">TODO</span></span><span class="org-org-level-3"> Implement RLS model</span>
<span class="org-org-level-3">*** </span><span class="org-org-level-3"><span class="org-org-todo">TODO</span></span><span class="org-org-level-3"> Validate results</span>
</pre>
</div>

<p>
So we model user stories as subheadings and we categorize them within "projects".
</p>

<p>
Some details:
</p>
<ul class="org-ul">
<li>The header properties set the category to work. The <code>recursive</code> part make it so that subheadings/subprojects can inherit it.</li>
<li>If you put <code>[/]</code> in your header title, you will get for free a count of how many you have completed and the total.</li>
</ul>

<p>
The <code>work</code> category can then be used to filter agenda views like described in the previous section.
</p>
</div>
</div>

<div id="outline-container-org449c712" class="outline-2">
<h2 id="org449c712">Agenda and notifications on your iPhone</h2>
<div class="outline-text-2" id="text-org449c712">
<p>
Ok, the system we configured on Emacs seems pretty solid.
What about when we are away from the laptop?
</p>

<p>
Wouldn't it be great to be able to view your agenda on the go, get push notifications?
The <a href="https://beorgapp.com">BeOrg</a> app for iOS goes pretty close to what I need from it.
</p>

<p>
I keep my <code>org</code> folder on Dropbox and version control.
BeOrg can sync from Dropbox without hassle.
I hardly ever edit files on the go, I neved had a Dropbox conflict.
</p>

<p>
I can see my agenda (same that I see in the dashboard) and I get notifications for scheduled tasks.
I can read org files on the go, nice to quickly check up on some notes, recipes or guitar chords.
Highly recommended.
</p>
</div>
</div>

<div id="outline-container-org6865edc" class="outline-2">
<h2 id="org6865edc">Capture new ideas from your iPhone</h2>
<div class="outline-text-2" id="text-org6865edc">
<p>
In the first section we have described 3 problems but we still haven't solved the third:
</p>
<blockquote>
<ol class="org-ol">
<li>I am not good at capturing my tasks in this file during my day.</li>
</ol>
</blockquote>

<p>
I found a nice way to capture ideas from my iPhone.
That is achieved through the <a href="https://getdrafts.com">Drafts</a> app for iOS.
</p>

<p>
You can get an "action" for free called <a href="https://actions.getdrafts.com/a/1Pd">Org-mode capture</a>.
Once you set it up on your iPhone, you can write quick notes and send them to a file in Dropbox.
</p>

<p>
Unfortunately you can't edit the action template unless you pay for the premium tier of Drafts.
I am personally fine with leaving the default, which will write to <code>Notes/Test.inbox.org</code>.
I can just create symlink from <code>Notes</code> to my <code>org</code> folder in Dropbox.
I usually send a bunch of ideas during my day to my "mobile inbox" and then refile (<code>org-refile</code>)  them to appropriate headers.
</p>

<p>
This was the last trick, I hope you found the article useful!
If something was not clear, please leave a comment below.
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>New blog setup</title>
      <link>https://lucacambiaghi.com/posts/weblorg.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/weblorg.html</guid>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>Simpler is better</strong></p>
          
          
<div id="outline-container-orgf287ce5" class="outline-2">
<h2 id="orgf287ce5">What was wrong?</h2>
<div class="outline-text-2" id="text-orgf287ce5">
<p>
Ooops, I did it again! In my <a href="https://lucacambiaghi.com/posts/new-website.html">first blog post</a> I described how cool was my setup with
<code>shadow-cljs</code>, <code>clojurescript</code> and <code>react-native</code> and big my ambitions of improving my knowledge
of this amazing stack was.
</p>

<p>
Well, I learned <i>something</i> (see <a href="https://lucacambiaghi.com/posts/blog-comments.html">this blog post</a>) but I am going to be honest: the setup had its quirks. Org files
would be converted to markdown and the markdown would be then exported to HTMl by a <a href="https://github.com/yogthos/markdown-clj">clojure library</a>.
Plus, the routing logic was using another clojure library which was kind of hard to work with: I spent hours
trying to place a link to my resume.
</p>

<p>
I sat down and I thought: what do I want from my blog? I want it to be <b>simple</b> so I can focus on writing.
I was losing enough time with my previous setup to make everything work.
Still, it was a very valuable experience.
It is still available at <a href="https://luca--lccambiaghi.netlify.app">this URL</a>.
</p>
</div>
</div>

<div id="outline-container-org40c41b4" class="outline-2">
<h2 id="org40c41b4">Welcome to the past!!</h2>
<div class="outline-text-2" id="text-org40c41b4">
<p>
Since that first blog post in May 2020, I must admit I have become even more of an emacs fanboy.
I am now heavily invested in org mode for all my prose and most of my experimental code
(I'll write about my <code>emacs-jupyter</code> setup one day).
</p>

<p>
Recently I stumbled upon a <a href="https://emacs.love/weblorg/doc/index.html">really elegant solution</a> that uses the <code>emacs</code> exporting facility to export
org to HTML and collects them in a static site. That's it.
</p>

<p>
As a developer you need to worry about three things:
</p>
<ul class="org-ul">
<li>Initial setup (mostly <code>publish.el</code> file)</li>
<li>HTML templates</li>
<li>CSS styling</li>
</ul>

<p>
You can basically copy the minimal working example from <a href="https://github.com/emacs-love/weblorg">the github project</a> and start writing your
org blog posts. You can then refine the default style and templates.
</p>

<p>
Once the blog is setup, you can just focus on the writing. Oh, and it provides an RSS feed out of the box!!
</p>
</div>
</div>

<div id="outline-container-org1480850" class="outline-2">
<h2 id="org1480850">My workflow</h2>
<div class="outline-text-2" id="text-org1480850">
<p>
Starting from the basic example I added a few nice things.
</p>

<p>
I started with defining a <a href="https://github.com/lccambiaghi/lccambiaghi.github.io/blob/master/.github/workflows/build.yml">Github Action</a> that on every build will re-generate the website and publish it
to Github Pages. In the Github Action I install emacs and run <code>emacs --script publish.el</code>.
In my <code>publish.el</code> script I check for a <code>GHUB</code> env variable and if present I install the required dependencies.
</p>

<p>
I also ported the 2 tools I was using in my previous setup, the <code>Hyvor Talk</code> comments and
the <code>clicky.com</code> analytics. To do so I simply had to add HTML to the <code>index.html</code> and <code>post.html</code> templates.
</p>

<p>
Finally, I edited some CSS to adjust the default size of the header and to add the dates of each blog post to the index.
I just had to edit the <code>blog.html</code> templates, where I can extract file properties of org files with this syntax:
</p>
<div class="org-src-container">
<pre class="src src-html">&lt;<span class="org-function-name">h1</span>&gt;<span class="org-underline"><span class="org-bold">Posts</span></span>&lt;/<span class="org-function-name">h1</span>&gt;

&lt;<span class="org-function-name">ul</span> <span class="org-variable-name">class</span>=<span class="org-string">"posts"</span>&gt;
  {% for post in posts %}
  &lt;<span class="org-function-name">li</span> <span class="org-variable-name">class</span>=<span class="org-string">"post-title"</span>&gt;
    &lt;<span class="org-function-name">a</span> <span class="org-variable-name">href</span>=<span class="org-string">"{{ url_for("</span>posts<span class="org-string">", slug=post.slug) }}"</span>&gt;{{ post.title }}&lt;/<span class="org-function-name">a</span>&gt;
    &lt;<span class="org-function-name">p</span> <span class="org-variable-name">class</span>=<span class="org-string">"post__meta"</span>&gt; {{ post.date|strftime("<span class="org-variable-name">%b</span> <span class="org-variable-name">%d</span>, <span class="org-variable-name">%Y</span>") }} {{ post.filetags }} &lt;/<span class="org-function-name">p</span>&gt;
    &lt;<span class="org-function-name">p</span>&gt; {{ post.subtitle }} &lt;/<span class="org-function-name">p</span>&gt;
  &lt;/<span class="org-function-name">li</span>&gt;
  {% endfor %}
&lt;/<span class="org-function-name">ul</span>&gt;
</pre>
</div>

<p>
The default style of the blog is not as nice as the previous one I had but if needed I can
adjust the <code>post__meta</code> class. I plan to start using <code>Tailwind CSS</code> soon.
</p>

<p>
In conclusion, I had a lot of fun porting my posts over this new setup and in addition I
am confident this will further reduce the friction between me and blogging!
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>Nix, the functional package manager</title>
      <link>https://lucacambiaghi.com/posts/nix-package-manager.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/nix-package-manager.html</guid>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>Declare your software and dotfiles and make them reproducible forever</strong></p>
          
          
<div id="outline-container-orgb01147c" class="outline-2">
<h2 id="orgb01147c">Why should you care?</h2>
<div class="outline-text-2" id="text-orgb01147c">
<p>
I recently had to restore my Mac, as I covered in my previous blog post.
I have now experienced what it is to start from scratch and have a software configure your new OS.
</p>

<p>
It was liberating to think that next time it would take me less than an hour to get up to speed.
This is called having a portable configuration.
Of course, the solution I described was not portable, actually limited to macOS.
</p>

<p>
I spent the past week or so learning about Nix.
Nix is a functional package manager that takes the concept of portable configuration to its furthest point.
In <code>NixOS</code> you can declare your whole system configuration, including hardware (eg. audio and display drivers).
</p>

<p>
It is the oldest story in the world, it is what the <code>.emacs</code> allows the Emacs user to do.
Declare the needed packages and how you want them configured, bring your configuration with you forever.
<code>nix</code> extends this power to the entire computing environment.
</p>

<p>
My objective was to declare the fundamental building blocks of my workflow:
</p>
<ul class="org-ul">
<li><code>CLI</code> packages (<code>kubectl</code>, <code>python</code>, <code>poetry</code>, etc.)</li>
<li><code>GUI</code> apps (Dropbox, 1Password, Slack, etc.)</li>
<li><code>zsh</code> (<code>oh-my-zsh</code>, plugins, theme, etc.)</li>
<li><code>emacs</code> (<code>gccemacs</code> and <code>~/.doom.d/</code>)</li>
<li>Dotfiles (e.g. <code>~/.kube/config</code>, <code>~/.ssh/id_rsa.pub</code>, &#x2026;)</li>
</ul>
</div>
</div>

<div id="outline-container-orgb92fe87" class="outline-2">
<h2 id="orgb92fe87">Installing Nix</h2>
<div class="outline-text-2" id="text-orgb92fe87">
<p>
If you are on <code>macOS</code>, there are very high chances you are using <code>brew</code>.
It is stable, user friendly, basically all packages are available.
</p>

<p>
Well, <code>nix</code> is far from that user experience.
I found its documentation quite difficult.
The installation process was hard.
There are not so many examples online you can learn from.
</p>

<p>
Let me now give you the good news.
As it is common with software that is difficult to tame..
it is totally worth it.
</p>

<p>
When you get a stable installation and you climb the first part of the steep learning curve..
it is impossible to come back.
Like Emacs.
</p>

<p>
So, with a good dose of patience follow my tutorial.
</p>
</div>

<div id="outline-container-org7724224" class="outline-3">
<h3 id="org7724224">Create the <code>nix</code> volume</h3>
<div class="outline-text-3" id="text-org7724224">
<p>
If you have the latest <code>macOS</code> Catalina, we will need to create a volume
where <code>nix</code> will download packages and build our environment.
A very cool feature is that we will be able to roll-back to previous "generations" of our environment.
</p>

<p>
We will issue a few commands at the terminal.
We are not doing anything dramatic and if something goes wrong we can easily delete the volume with Disk Utility and start the process from the beginning.
For reference, I followed <a href="https://www.philipp.haussleiter.de/2020/04/fixing-nix-setup-on-macos-catalina/">this</a> and <a href="https://dubinets.io/installing-nix-on-macos-catalina/">this</a> blog posts.
</p>

<p>
First we create the volume with the <code>diskutil</code> program:
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo diskutil apfs addVolume disk1 &#8216;APFS&#8217; nix
</pre>
</div>

<p>
Then we need to ask <code>diskutil</code> for the <code>UUID</code> of our volume:
</p>

<div class="org-src-container">
<pre class="src src-sh">diskutil info /dev/disk1s6 | grep UUID
</pre>
</div>

<p>
Let's copy that information and paste it in the below command:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span class="org-builtin">echo</span> <span class="org-string">"UUID=12345678-1234-1234-1234-123456789123 /nix apfs  rw"</span> | sudo tee -a /etc/fstab
</pre>
</div>

<p>
Finally, let's edit the <code>/etc/synthetic.conf</code> file:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span class="org-builtin">echo</span> <span class="org-string">'nix'</span> | sudo tee -a /etc/synthetic.conf
</pre>
</div>

<p>
and restart.
</p>
</div>
</div>

<div id="outline-container-org0ab24d0" class="outline-3">
<h3 id="org0ab24d0">Iinstall <code>nix</code></h3>
<div class="outline-text-3" id="text-org0ab24d0">
<p>
After the restart, we can set the volume as read-only:
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo chown -R $(whoami) /nix
</pre>
</div>

<p>
And install <code>nix</code>:
z
</p>
<div class="org-src-container">
<pre class="src src-sh">sh &lt;(curl -L https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store-volume --daemon
</pre>
</div>

<p>
The installer is pretty straightforward.
To test that the installation went through, try a <code>nix-shell</code> command:
</p>

<div class="org-src-container">
<pre class="src src-sh">nix-shell -p ripgrep
</pre>
</div>

<p>
If everything went well, congratulations!
Else, head over to the Troubleshooting section.
</p>
</div>
</div>

<div id="outline-container-org3ae9b37" class="outline-3">
<h3 id="org3ae9b37">Install <code>nix-darwin</code></h3>
<div class="outline-text-3" id="text-org3ae9b37">
<p>
In order for <code>nix</code> to control some of the system services of <code>macOS</code>, we need to install <code>nix-darwin</code>.
</p>

<div class="org-src-container">
<pre class="src src-sh">nix-build https://github.com/LnL7/nix-darwin/archive/master.tar.gz -A installer
</pre>
</div>

<p>
And execute the built installer:
</p>

<div class="org-src-container">
<pre class="src src-sh">./result/bin/darwin-installer
</pre>
</div>

<p>
Finally, let's add the <code>nixpkgs</code> channel:
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo -i nix-channel --add https://nixos.org/channels/nixpkgs-20.09-darwin nixpkgs
sudo -i nix-channel --update nixpkgs
</pre>
</div>

<p>
A channel is simply a repository where <code>nix</code> will look for downloads.
<a href="https://github.com/NixOS/nixpkgs">Here</a> you can find the repository with the "recipe" for all the packages.
Once you gained confidence with the <code>nix</code> language, it is easy to write a recipe for a package and contribute it to the community.
</p>
</div>
</div>

<div id="outline-container-org61bf665" class="outline-3">
<h3 id="org61bf665">Troubleshooting</h3>
<div class="outline-text-3" id="text-org61bf665">
<p>
Skip this section if you installed successfully.
</p>

<p>
In case the <code>nix</code> commands are not available to your path:
</p>
<ul class="org-ul">
<li>First check that <code>source ~/.nix-profile/etc/profile.d/nix.sh</code> is in your <code>~/.zshrc</code> or <code>~/.bashrc</code></li>
<li>Next, check that your <code>.nix-profile</code> is populated.</li>
</ul>

<p>
In my case, it was empty and I had to create the symlink myself with:
</p>

<div class="org-src-container">
<pre class="src src-sh">ln -s /nix/var/nix/profiles/default/bin .nix-profile
</pre>
</div>

<p>
And then switching profile:
</p>

<div class="org-src-container">
<pre class="src src-sh">nix-env --switch-profile /nix/var/nix/profiles/per-user/$<span class="org-variable-name">USER</span>/profile
</pre>
</div>

<p>
I faced another couple of misteryous errors when installing <code>nix-darwin</code>, solved by exporting environment variables as indicated in some remote github issues.
Export them and run the commands again:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span class="org-builtin">export</span> <span class="org-variable-name">NIX_SSL_CERT_FILE</span>=<span class="org-string">"/nix/var/nix/profiles/default/etc/ssl/certs/ca-bundle.crt"</span>
<span class="org-builtin">export</span> <span class="org-variable-name">NIX_PATH</span>=~/.nix-defexpr/channels:$<span class="org-variable-name">NIX_PATH</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orge14b9e5" class="outline-2">
<h2 id="orge14b9e5">Home Manager</h2>
<div class="outline-text-2" id="text-orge14b9e5">
<p>
Alright, the complicated part is behind us.
We have just opened the door to new cool functional workflows.
</p>

<p>
The <code>nix</code> ecosystem is rich and complex.
I started with a package which aims to simplify "home" configuration.
It is called <a href="https://github.com/nix-community/home-manager">Home Manager</a>.
</p>

<p>
I recommend to start by cloning <a href="https://github.com/ryantm/home-manager-template">this repository</a>.
It contains a great template that you can start customizing right away.
</p>

<p>
The main thing to consider is the <code>home.nix</code> file:
</p>

<div class="org-src-container">
<pre class="src src-nix">{ pkgs, ... }:
{
  <span class="org-nix-attribute">home.username</span> = <span class="org-string">"$USER"</span>;
  <span class="org-nix-attribute">home.homeDirectory</span> = <span class="org-string">"$HOME"</span>;
  <span class="org-nix-attribute">home.stateVersion</span> = <span class="org-string">"20.09"</span>;
  <span class="org-comment">#</span>
  <span class="org-nix-attribute">programs.bash</span> = {
    <span class="org-nix-attribute">enable</span> = <span class="org-nix-builtin">true</span>;
  };
  <span class="org-nix-attribute">home.packages</span> = [
    pkgs.htop
    pkgs.fortune
  ];
}
</pre>
</div>

<p>
Start by inserting your username and home directory.
</p>

<p>
Now you can run the helper commands available in the repo:
z
</p>
<div class="org-src-container">
<pre class="src src-sh">./update-dependencies.sh
./switch.sh
</pre>
</div>

<p>
When the process completes, start a new shell.
If you didn't have it before, you have installed <code>htop</code> and can use it in your terminal.
</p>

<p>
It also installed another <code>bash</code> executable.
You can see all executables with <code>which -a</code>:
z
</p>
<div class="org-src-container">
<pre class="src src-sh">~ &#10095; which -a bash
/Users/luca/.nix-profile/bin/bash
/run/current-system/sw/bin/bash
/bin/bash
</pre>
</div>

<p>
When you ran <code>switch</code>, <code>nix</code> downloaded the declared packages and symlinked the executables in your <code>~/.nix-profile</code> folder.
<code>nix</code> will simply add the packages to your <code>PATH</code> and it will not break your existing installation.
</p>

<p>
This is great because you can slowly migrate your <code>brew</code> packages.
And if something goes wrong, you can rollback to the previously built configuration with:
</p>

<div class="org-src-container">
<pre class="src src-sh">nix-env --rollback
</pre>
</div>

<p>
In fact, I accepted that on <code>macOS</code> my <code>home-manager</code> configuration will live algonside a <code>Brewfile</code> to install <code>GUI</code> apps (<code>brew cask</code> is much more stable and furnished).
Restoring my system will just amount to:
</p>

<div class="org-src-container">
<pre class="src src-sh">./update-dependencies.sh
./switch.sh
<span class="org-comment-delimiter"># </span><span class="org-comment">install brew</span>
ruby -e <span class="org-string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span>
brew bundle
</pre>
</div>

<p>
and this is an extract of my <code>Brewfile</code>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span class="org-comment-delimiter"># </span><span class="org-comment">Taps</span>
tap <span class="org-string">"homebrew/cask"</span>
tap <span class="org-string">"homebrew/cask-versions"</span>
tap <span class="org-string">"homebrew/core"</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">Not available on nixpkgs</span>
brew <span class="org-string">"azure-cli"</span>
brew <span class="org-string">"parquet-tool"</span>
brew <span class="org-string">"mas"</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">GUI apps</span>
cask <span class="org-string">"1password6"</span>
cask <span class="org-string">"discord"</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">...</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org369a32e" class="outline-2">
<h2 id="org369a32e">Next steps</h2>
<div class="outline-text-2" id="text-org369a32e">
<p>
In this short post I tried to keep things simple.
There is a lot to explore in the ecosystem.
</p>

<p>
Some of the great tools to learn about:
</p>
<ul class="org-ul">
<li><code>nix-shell</code> allows you to spawn a shell with declared dependencies.
Think one shell for building a LaTeX document.
Another shell for a <code>python</code> project.
You can avoid polluting your system and achieve stable, portable, sharable environments.</li>
<li>The logical follower is <code>nix-build</code>, which allows you to package your <code>python</code> project easily.</li>
<li>We have seen <code>nix-env</code> in action with <code>home-manager</code>.
It is used for managing system configuration.</li>
</ul>

<p>
I will just end with a link to my personal <code>nixpkgs</code> repo which holds <a href="https://github.com/lccambiaghi/nixpkgs">my home configuration</a>.
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>Restoring my Mac</title>
      <link>https://lucacambiaghi.com/posts/restoring-my-mac.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/restoring-my-mac.html</guid>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>With an auto-configuring script</strong></p>
          
          
<div id="outline-container-org650d342" class="outline-2">
<h2 id="org650d342">setup.org</h2>
<div class="outline-text-2" id="text-org650d342">
<p>
This week-end I restored my Mac.
I was having some major iCloud issues, my Documents and Desktop folders would not sync.
My Mac in general looked really tired.
</p>

<p>
I was prepared.
I took inspiration from a colleague's bash script to write my own configuration script, in <code>org-mode</code>.
This format allows me to organize my <code>sh</code> code blocks within headlines and comments.
I can then <code>tangle</code> the blocks to a file <code>setup.sh</code>, which I can run on the new Mac.
</p>

<p>
I can do this by having this property at the top of <code>setup.org</code>:
</p>
<pre class="example" id="orga6fee3b">
#+PROPERTY: header-args :tangle ~/git/org/personal/setup.sh
</pre>

<p>
This is the structure of the document:
</p>
<pre class="example" id="orge1b21e4">
* macOs settings
* brew
* zsh
* fonts
* cli
* gui
* dotfiles
* execute all
</pre>

<p>
In each section I have a <code>sh</code> code block.
This is an example block from the "gui" section:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span class="org-function-name">install_apps</span>() {
    <span class="org-builtin">echo</span> <span class="org-string">"Installing: base apps"</span>
    <span class="org-variable-name">BASE_APPS</span>=<span class="org-string">"google-chrome amethyst slack visual-studio-code firefox iterm2 iina menumeters 1password6 qbitorrent private-internet-access"</span>
    brew tap homebrew/cask-versions
    brew cask install $<span class="org-variable-name">BASE_APPS</span>
    <span class="org-builtin">echo</span> <span class="org-string">"Installing: docker"</span>
    brew cask install docker
    <span class="org-builtin">echo</span> <span class="org-string">"Installing: corporate"</span>
    <span class="org-variable-name">CORPORATE</span>=<span class="org-string">"microsoft-office keybase microsoft-azure-storage-explorer intune-company-portal microsoft-teams"</span>
    brew cask install $<span class="org-variable-name">CORPORATE</span>
}
</pre>
</div>

<p>
I can "export" the <code>org</code> file to <code>setup.sh</code> with <code>M-x org-babel-tangle</code>.
</p>
</div>
</div>

<div id="outline-container-orgc0542a4" class="outline-2">
<h2 id="orgc0542a4">Recovery Mode and setup.sh</h2>
<div class="outline-text-2" id="text-orgc0542a4">
<p>
Before erasing all content gathered in 12 months, I quickly offloaded some files to a USB key.
I mostly cared about an "AI for trading" course and some work analyses not in version control.
</p>

<p>
Without thinking too much, I booted in Recovery Mode with cmd+R, erase the HD and reinstalled.
(I found out later that I forgot about my <code>.gnupg</code> folder with my private <code>gpg</code> key..)
</p>

<p>
While running my <code>install.sh</code> script, I realized my main needs:
</p>
<ul class="org-ul">
<li>Emacs (+ Doom)</li>
<li>Dropbox (org)</li>
<li>Password Manager</li>
</ul>

<p>
I could survive with a browser and Emacs for a week.
Okay, maybe I would need Slack for work but not much else.
</p>

<p>
My first impulse was to rebuild <code>gccemacs</code> on my Mac, in parallel to my already big configuration efforts.
To my surprise, the process has been incredibly easy.
Well, maybe because I have already spent a few hours fighting <code>gccemacs</code> in the past weeks.
</p>

<p>
All I did to install it was to clone <a href="https://github.com/jimeh/build-emacs-for-macos">this</a> repo and run:
</p>
<ol class="org-ol">
<li><code>brew bundle</code></li>
<li><code>./build-emacs-for-macos --git-sha d5791ba5feeb5500433ca43506dda13c7c67ce14 feature/native-comp</code></li>
<li>Move the app to <code>Applications</code>.</li>
</ol>

<p>
In the meanwhile, my <code>install.sh</code> script was having some hiccups.
I got somehow 90% of the functionalities working (loads of <code>brew</code> downloads: CLI tools and GUI apps)
I had to manually copy-paste some commands from the harder sections such as <code>install-zsh</code> and <code>restore-dotfiles</code>.
Overall, I am very satisfied: it really saved a lot of time.
</p>

<p>
Once I had built Emacs, I simply had to reinstall Doom.
On its first run with <code>gccemacs</code>, Doom will now compile AOT all packages, which takes a while.
</p>

<p>
Halfway through, I cloned my Doom configuration (stored in git) to <code>.doom.d</code> and build the extra packages in my config.
With minimal effort, few minutes later, I had restored my feature-complete IDE.
<code>straight</code> and <code>Doom</code> in general is amazing.
</p>
</div>
</div>

<div id="outline-container-orgd4bc40b" class="outline-2">
<h2 id="orgd4bc40b">Last manual steps</h2>
<div class="outline-text-2" id="text-orgd4bc40b">
<p>
I then documented some final manual steps I had forgotten to include in my install script.
Some examples:
</p>
<ul class="org-ul">
<li>Forgot to backup SSH keys&#x2026; <code>ssh-keygen</code></li>
<li>My <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> library does not work. I had to add <code>export R_LIBS_USER=...</code> to my <code>.zshenv</code></li>
<li>Forgot to install pyright.. <code>brew install node &amp;&amp; npm install -g pyright</code></li>
<li>iTerm2 does not send escape sequences.. follow <a href="https://www.clairecodes.com/blog/2018-10-15-making-the-alt-key-work-in-iterm2/">this</a> guide.</li>
</ul>

<p>
It sounds like a waste of time and a lot of work to start from scratch and fight these issues.
I find it a valuable task that lets me learn about my workflow.
I document it and declare it.
</p>

<p>
I have achieved full reproducibility when it comes to my IDE.
Next step is my full computing environment.
That is why I am now looking at <code>nix</code> and <code>home-manager</code>.
Expect a blog post about it in the near future!
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>Doom gccemacs on MacOS</title>
      <link>https://lucacambiaghi.com/posts/doom-emacs.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/doom-emacs.html</guid>
      <pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>The best IDE, now even faster</strong></p>
          
          
<div id="outline-container-org4fa4e0b" class="outline-2">
<h2 id="org4fa4e0b">Emacs is born</h2>
<div class="outline-text-2" id="text-org4fa4e0b">
<p>
The first time I saw Emacs was on the ThinkPad of my Master Thesis' supervisor.
He was coding in R and he had split the screen in two parts, writing code to the left, evaluating it to see the results in the REPL on the right.
I was impressed by it, my setup at the time consisted of Jupyter Notebooks for exploration, Visual Studio to write LaTeX, Pycharm to debug and deploy batch jobs to the VM.
</p>

<p>
Little did I know that 2 years later I would have <b>integrated</b> my worfklow into one editor, the very same one he was using.
Another colleague of mine was using Emacs and when pair programming with him I was again struck by his workflow and some of the features of its editor.
One weekend, almost joking, I downloaded vanilla Emacs and I followed the tutorial.
</p>

<p>
Maaan, these weird keybindings.
Now I know that Emacs has been developed before the <a href="https://www.ibm.com/support/knowledgecenter/SSLTBW_2.1.0/com.ibm.zos.v2r1.f54dg00/cuahlp.htm">Common User Access</a> guidelines were designed.
Its philoshopy allows the user to change keybindings to whatever you expect from it but it won't suggest it to you!
</p>

<p>
Of course I did not know how easy it would be to configure <code>cua-mode</code> in case I wanted standard <code>s-x</code>, <code>s-v</code> bindings to copy and paste.
However, on the same day I discovered that a popular alternative to the vanillla keybindings was the so-called <code>evil-mode</code>.
The power of <code>vim</code>'s modal editing and the expressivity of the <code>lisp</code> machine.
</p>

<p>
Very soon I learned about Emacs "distributions" or "starter kits".
The most popular is Spacemacs: it comes configured with all the "cool" packages, among them <code>evil-mode</code>.
I then spent weeks learning about Spacemacs, Emacs and <code>emacs-lisp</code>.
</p>

<p>
I will have to write another blog post to celebrate all my achievements with Emacs.
This one will just bedicated to the configuration of it.
</p>
</div>
</div>

<div id="outline-container-org0dffb42" class="outline-2">
<h2 id="org0dffb42">Doom</h2>
<div class="outline-text-2" id="text-org0dffb42">
<p>
Some of Spacemacs qualities:
</p>
<ul class="org-ul">
<li>Spacemacs is well documented and perfect for a first Emacs user.</li>
<li>It is a community effort, things movest fast. Maybe too fast, looking at the number of open issues.</li>
<li>It is feature complete. Maybe too complete, someone would argue it is slow.</li>
<li>It abstracts away much of the complexity of Emacs. Maybe a bit too much, I would sometimes learn Spacemacs specific terminology but not so much <code>elisp</code>.</li>
</ul>

<p>
Beacuse I am curios, I decided to try the second most popular Emacs distribution: <a href="https://github.com/hlissner/doom-emacs">Doom</a> (I am still not amused by the name).
Here some of its qualities:
</p>
<ul class="org-ul">
<li>Doom is not a comunity effort like Spacemacs but is mantained by one person, very active and helpful.</li>
<li>There is a great community of users on <a href="https://discord.gg/qvGgnVx">Discord</a>, helpful and respectful.</li>
<li>It is modular and completely configurable. The default configuration for the available modules is always well thought.</li>
<li>It is carefully designed with performance in mind.</li>
<li>It is much closer to the <code>elisp</code> metal. It offers cool macros to rebind keys, to install packages, etc.</li>
</ul>

<p>
Thanks to Doom I started to <b>configure</b> my editor and not just to rely on other people's modules.
I finally learned to inspect Emacs by describing functions and variables.
I learned about modes, hooks, advices.
I wrote some simple elisp functions to add features I needed.
<a href="https://lccambiaghi.github.io/.doom.d/readme.html">Here</a> you can see an HTML render of my config.
</p>
</div>
</div>

<div id="outline-container-org9160ca9" class="outline-2">
<h2 id="org9160ca9">gccemacs</h2>
<div class="outline-text-2" id="text-org9160ca9">
<p>
The Doom Emacs community is active on Discord, here is where I hear about the latest trends.
Lately (August 2020) the latest trend has definitely been <a href="https://www.emacswiki.org/emacs/GccEmacs">gccemacs</a>.
This is a development branch of Emacs HEAD which compiled elisp code to native code, bringing huge performance benefits.
</p>

<p>
Emacs is often accused of being slow compared to modern editors.
The dynamic nature of the <code>elisp</code> machine makes it by nature slower than the compiled counterparts.
This clever solution has gained popularity lately, so much that it has been announced it will be merged into master.
</p>

<p>
During these COVID times our team is working from home.
My work laptop is a dual core MacBook Pro, which has some performance issues when I am screen sharing and programming with Emacs.
One day I decided I had to try it. It was worth it.
</p>

<p>
I used <a href="https://github.com/jimeh/build-emacs-for-macos">this repo</a> to build Emacs 28, <code>feature/native-comp</code> branch.
After cloning it, I first had to install a patched <code>gcc</code> version:
</p>
<div class="org-src-container">
<pre class="src src-sh">./install-patched-gcc
</pre>
</div>
<p>
I had some installation issues which were solved by updating to the latest Apple's Command Line Tools.
You can do that with:
</p>
<div class="org-src-container">
<pre class="src src-sh">xcode-select --install
</pre>
</div>

<p>
Once <code>gcc</code> was installed, I could build Emacs 28 with:
</p>
<div class="org-src-container">
<pre class="src src-sh">./build-emacs-for-macos --git-sha 3023eb569213a3dd5183640f6e322acd00ea536a feature/native-comp
</pre>
</div>
<p>
You should pick a recent git sha by looking at <a href="https://github.com/jimeh/build-emacs-for-macos/issues/6">this issue</a> which tracks "good commits" that lead to stable versions.
</p>

<p>
I then replaced my previous Emacs.app with the one just built.
Maybe that won't work for everybody, it depends how you installed Emacs27.
My previous installation was this tap of <code>emacs-plus</code>:
</p>
<div class="org-src-container">
<pre class="src src-sh">brew tap d12frosted/emacs-plus
</pre>
</div>
<p>
And this are the install options:
</p>
<div class="org-src-container">
<pre class="src src-sh">brew install emacs-plus --without-spacemacs-icon --HEAD --with-emacs-27-branch --with-jansson --with-modern-icon
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd1703e5" class="outline-2">
<h2 id="orgd1703e5">Gotchas</h2>
<div class="outline-text-2" id="text-orgd1703e5">
<p>
Doom Emacs already unofficially kind of supports <code>gccemacs</code>.
I just replaced my Emacs.app with the new one and had to run:
</p>
<div class="org-src-container">
<pre class="src src-sh">doom sync &amp;&amp; doom build
</pre>
</div>
<p>
And wait for the compilation jobs to finish.
</p>

<p>
Once that was done I faced a few issues, which were not exactly well documented.
After running a second <code>doom sync</code> my Emacs failed to start with an error about some misteryous magit variable.
I found the solution on Discord: the guilty is a compiled autoloads file:
</p>
<div class="org-src-container">
<pre class="src src-sh">rm -rf ~/.emacs.d/local/cache/eln/x86_64-apple-darwin19.5.0-8b26f6d2e293e8b6/autoloads*.eln
</pre>
</div>

<p>
Another important remark: Emacs 28 is unstable and some packages don't support it yet.
My workflow relies heavily on two packages: <code>emacs-jupyter</code> and <code>dap-mode</code>.
Both of them were broken after the update.
</p>

<p>
When I tried to run <code>emacs-jupyter</code> in an <code>.org</code> file I was asked to download the <code>zmq</code> module, to which I agreed.
But then the installation broke because of a missing file.
I found the solution on a remote github issue: I had to change the extension of the downloaded <code>.so</code> file:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span class="org-builtin">cd</span> ~/.emacs.d/.local/straight/build/emacs-zmq
cp emacs-zmq.so emacs-zmq.dylib
</pre>
</div>

<p>
To fix <code>dap-mode</code> I had to unpin few packages to enable the support of Emacs 28.
In fact, Doom locks pacakges to specific versions to make sure nothing breaks on the stable version (Emacs 27).
All I had to do was to write:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(unpin! dap-mode lsp-mode treemacs)
</pre>
</div>
<p>
In my <code>.doom.d/packages.el</code>.
</p>

<p>
I hope some early adopter can find this blog post and solve some of his installation/configuration issues with these solutions!
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>React Native from Clojurescript</title>
      <link>https://lucacambiaghi.com/posts/react-native-cljs.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/react-native-cljs.html</guid>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>Develop native mobile apps in the most elegant way</strong></p>
          
          
<div id="outline-container-org53ed3d9" class="outline-2">
<h2 id="org53ed3d9">React Native</h2>
<div class="outline-text-2" id="text-org53ed3d9">
<p>
I have always been curious about mobile apps development.
In 2018 I tried with a friend to launch a startup and the first thing I tried was to develop a mobile app.
I wanted to write my code only once for Android and iOS and not the same logic twice in Java+Swift.
</p>

<p>
At the time of research the two opponents were <a href="https://dotnet.microsoft.com/apps/xamarin">Xamarin</a> and React Native.
The promise is the same: write the logic once, have the framework manage the native code.
</p>

<p>
After reading some pros and cons I decided to write <code>C#</code> with Xamarin because scared of React and Javascript and the fontend world.
It was an ok experience but the framework was not mature and <code>C#</code> did not excite me.
When I hit my first real problem when implementing authentication, I gave up.
</p>

<p>
Fast forward 2 years and React Native is mature and I am no longer afraid!
<a href="https://github.com/reagent-project/reagent">Reagent</a> made me fall in love React and Clojurescript allows me to skip Javascript.
</p>

<p>
React Native with the support of Facebook has developed rapidly (most active github repo in 2019).
It can leverage the React ecosystem, it has good documentation, its generic components are well designed.
</p>
</div>
</div>

<div id="outline-container-org3aaabde" class="outline-2">
<h2 id="org3aaabde">Figwheel</h2>
<div class="outline-text-2" id="text-org3aaabde">
<p>
Inspired by <a href="https://increasinglyfunctional.com/2020/05/07/clojurescript-react-native-krell-emacs.html">this blog post</a>, my first attemp at React Native from Clojurescript was with Krell.
Krell's philoshopy is to provide a very thin layer over React Native.
Well, I had some hiccups during the setup, I found it still (too) barebones.
</p>

<p>
Few months later I saw another announcement on Slack: <code>figwheel</code> for React Native.
I followed the <a href="https://figwheel.org/docs/react-native.html">Getting Started</a> docs and I quickly had my iOS simulator running alongside <code>figwheel</code> hot-reloading.
</p>

<p>
I had also been hearing very good things about <a href="https://expo.io/">Expo</a>, which should handle for you complicated things like camera, location, notifications.
It was supported out of the box, here is my <code>ios.cljs.edn</code>:
</p>
<div class="org-src-container">
<pre class="src src-clojure">^{<span class="org-clojure-keyword">:react-native</span> <span class="org-clojure-keyword">:expo</span>
  <span class="org-clojure-keyword">:launch-js</span> [<span class="org-string">"yarn"</span> <span class="org-string">"ios"</span>]}
{<span class="org-clojure-keyword">:main</span> app.core}
</pre>
</div>
<p>
When I run <code>cider-jack-in-cljs</code>, CIDER will ask me to run <code>figwheel-main</code>, <code>ios</code> configuration.
This will return a <code>cljs</code> REPL and will run <code>yarn ios</code> in the background.
This is defined in <code>package.json</code> and runs <code>"expo start --ios"</code>.
With the iOS Simulator running I can then run the Expo app and select my iOS build.
</p>
</div>
</div>

<div id="outline-container-org80a598c" class="outline-2">
<h2 id="org80a598c">Reagent</h2>
<div class="outline-text-2" id="text-org80a598c">
<p>
My first steps consisted of learning what a React Native component is.
This is the first example in the Rect Native docs:
</p>
<div class="org-src-container">
<pre class="src src-js"><span class="org-keyword">import</span> { Text, View } from <span class="org-string">'react-native'</span>;

<span class="org-keyword">const</span> <span class="org-variable-name">YourApp</span> = () =&gt; {
  <span class="org-keyword">return</span> (
    &lt;View style={{ flex: 1, justifyContent: <span class="org-string">"center"</span>, alignItems: <span class="org-string">"center"</span> }}&gt;
      &lt;Text&gt;
        Hello World!
      &lt;/Text&gt;
    &lt;/View&gt;
  );
}
</pre>
</div>
<p>
Javascript makes it slightly verbose but the concept is quite simple: our app includes a <code>View</code> component and inside that a <code>Text</code> component.
Since <code>react-native</code> is really just React, we can use <code>reagent</code> to have hiccup-like syntax and smart UI reloading.
</p>

<p>
Looking on github for repos using the <code>cljs</code> + <code>react-native</code> combo I realized that every developer uses <code>js</code> interop in a slightly different way to wrap <code>react-native</code> components.
The <code>reagent-react-native</code> project helps eliminating this "common boilerplate" by providing ready-to-use components.
This is my <code>deps.edn</code>:
</p>
<div class="org-src-container">
<pre class="src src-clojure">{<span class="org-clojure-keyword">:deps</span> {<span class="org-type">org.clojure</span>/clojurescript     {<span class="org-clojure-keyword">:</span><span class="org-type">mvn</span><span class="org-default">/</span><span class="org-clojure-keyword">version</span> <span class="org-string">"1.10.773"</span>}
        <span class="org-type">io.vouch</span>/reagent-react-native {<span class="org-clojure-keyword">:</span><span class="org-type">git</span><span class="org-default">/</span><span class="org-clojure-keyword">url</span> <span class="org-string">"https://github.com/vouch-opensource/reagent-react-native.git"</span>
                                       <span class="org-clojure-keyword">:sha</span>     <span class="org-string">"54bf52788ab051920ed7641f386177374419e847"</span>}
        reagent                       {<span class="org-clojure-keyword">:</span><span class="org-type">mvn</span><span class="org-default">/</span><span class="org-clojure-keyword">version</span> <span class="org-string">"0.10.0"</span>
                                       <span class="org-clojure-keyword">:exclusions</span>  [<span class="org-type">cljsjs</span>/react <span class="org-type">cljsjs</span>/react-dom]}
        <span class="org-type">com.bhauman</span>/figwheel-main     {<span class="org-clojure-keyword">:</span><span class="org-type">mvn</span><span class="org-default">/</span><span class="org-clojure-keyword">version</span> <span class="org-string">"0.2.10-SNAPSHOT"</span>}}}
</pre>
</div>

<p>
And here is the minimal example above, with <code>reagent</code> syntax:
</p>
<div class="org-src-container">
<pre class="src src-clojure">(<span class="org-keyword">ns</span> <span class="org-type">core.app</span>
  (<span class="org-clojure-keyword">:require</span> [react]
            [reagent.react-native <span class="org-clojure-keyword">:as</span> rrn]))

(<span class="org-keyword">defn</span> <span class="org-function-name">hello</span> []
  [<span class="org-type">rrn</span>/view {<span class="org-clojure-keyword">:style</span> {<span class="org-clojure-keyword">:flex</span> 1 <span class="org-clojure-keyword">:align-items</span> <span class="org-string">"center"</span> <span class="org-clojure-keyword">:justify-content</span> <span class="org-string">"center"</span>}}
   [<span class="org-type">rrn</span>/text <span class="org-string">"Hello World!"</span>]])
</pre>
</div>
<p>
It can't get any more simple.
The reagent code is an abstraction for this lower level interop code:
</p>
<div class="org-src-container">
<pre class="src src-clojure">(<span class="org-keyword">def</span> <span class="org-variable-name">&lt;&gt;</span> <span class="org-type">react</span>/createElement)

(&lt;&gt; <span class="org-type">rn</span>/View
      #js {<span class="org-clojure-keyword">:style</span> #js {<span class="org-clojure-keyword">:flex</span>            1
                       <span class="org-clojure-keyword">:align-items</span> <span class="org-string">"center"</span>
                       <span class="org-clojure-keyword">:justifyContent</span>  <span class="org-string">"center"</span>}}
      (&lt;&gt; <span class="org-type">rn</span>/Text (str <span class="org-string">"HELLO WORLD!!"</span>)))
</pre>
</div>

<p>
Following the React Native docs was relatively easy.
I only had troubles when wrapping the <a href="https://reactnative.dev/docs/using-a-listview">FlatList</a> example:
</p>
<div class="org-src-container">
<pre class="src src-js"><span class="org-keyword">const</span> <span class="org-variable-name">FlatListBasics</span> = () =&gt; {
  <span class="org-keyword">return</span> (
    &lt;View style={styles.container}&gt;
      &lt;FlatList
        data={[
          {key: <span class="org-string">'Devin'</span>},
          {key: <span class="org-string">'Dan'</span>},
        ]}
        renderItem={({item}) =&gt; &lt;Text style={styles.item}&gt;{item.key}&lt;/Text&gt;}
      /&gt;
    &lt;/View&gt;
  );
}
</pre>
</div>

<p>
This is how I solved it:
</p>
<div class="org-src-container">
<pre class="src src-clojure">(<span class="org-keyword">defn</span> <span class="org-function-name">flat-list</span> []
  [<span class="org-type">rrn</span>/flat-list
   {<span class="org-clojure-keyword">:data</span>        [{<span class="org-clojure-keyword">:key</span> <span class="org-string">"Devin"</span>}
                  {<span class="org-clojure-keyword">:key</span> <span class="org-string">"Devn"</span>}]
    <span class="org-clojure-keyword">:render-item</span> #(&lt;&gt; <span class="org-type">rn</span>/Text
                      #js {<span class="org-clojure-keyword">:style</span> #js {<span class="org-clojure-keyword">:color</span>     <span class="org-string">"black"</span> <span class="org-clojure-keyword">:textAlign</span> <span class="org-string">"center"</span>}}
                      (.-key (.-item <span class="org-variable-name">%</span>)))}])

</pre>
</div>
<p>
The <code>render-item</code> function is passed a single argument, an object.
We can access the data accessing the <code>.-item</code> key.
</p>
</div>
</div>

<div id="outline-container-org942f684" class="outline-2">
<h2 id="org942f684">Calling clojure</h2>
<div class="outline-text-2" id="text-org942f684">
<p>
You soon come to the realization that 99% of the mobile apps we use can be represented by React Native components, some simple data logic and styling.
What makes <code>cljs</code> attractive for mobile app development is that you can write your logic in <code>clojure</code>.
</p>

<p>
To go beyond the basic tutorial, I decided to develop a quick app to play sudoku.
First I set up the View code to represent the Sudoku grid as a <code>flat-list</code>, as explained above.
Then, to implement the Model code I resorted to Clojure, functional programming and lazy sequences.
</p>

<p>
Instead of having to spin up <code>figwheel</code> + <code>Expo</code> + Simulator, I could simply open a <code>clj</code> REPL.
After writing the code for my sudoku grid in <code>sudoku.clj</code> (note the <code>defmacro</code>):
</p>
<div class="org-src-container">
<pre class="src src-clojure">(<span class="org-keyword">defmacro</span> <span class="org-function-name">sudoku-grid</span> []
  (<span class="org-keyword">-&gt;&gt;</span> (repeatedly nine-rows)
       (filter valid-rows?)
       (filter valid-columns?)
       (filter valid-blocks?)
       first))
</pre>
</div>

<p>
I could simply "require it" in <code>sudoku.cljs</code>:
</p>
<div class="org-src-container">
<pre class="src src-clojure">(<span class="org-keyword">ns</span> <span class="org-type">app.sudoku</span>
  (<span class="org-clojure-keyword">:require-macros</span> [app.sudoku]))
</pre>
</div>
<p>
I could have just written the logic directly in <code>sudoku.cljs</code> but this approach allows to leverage the whole <code>clj</code> ecosystem and permits faster experimentation.
This is the screenshot of the result, it was a lot of fun:
</p>


<div id="org7836a71" class="figure">
<p><img src="https://raw.githubusercontent.com/lccambiaghi/sudoku-cljsrn/master/assets/screen.png" alt="screen.png" />
</p>
</div>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>Literate learning</title>
      <link>https://lucacambiaghi.com/posts/think-stats.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/think-stats.html</guid>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>How to learn stats, clojure and vega-lite while having fun</strong></p>
          
          
<div id="outline-container-org922d35d" class="outline-2">
<h2 id="org922d35d">Think stats</h2>
<div class="outline-text-2" id="text-org922d35d">
<p>
When I first approached Clojure my curiosity brough me to look up what people were using to do Data Science in Clojure.
I found a book called <a href="https://www.packtpub.com/big-data-and-business-intelligence/clojure-data-science">Clojure for Data Science</a>, available through my employer's O'Reilly subscription.
I skimmed through it and saw it was introducing stats concepts in a very simple and clear way.
It was using the <code>incanter</code> "framework", which is unfortunately not in development anymore.
</p>

<p>
The author Henry Garner has also written <a href="http://clojuredatascience.com/posts/2016-12-02-data-science-ladder-abstraction.html">an interesting essay</a> about his experience with Clojure.
He is also the author of a stats library called <code>kixi.stats</code>.
In the essay he says that what he wrote this library while reading the book "Think stats".
He would re-implement the Python examples in Clojure.
</p>

<p>
The second edition of the book is <a href="https://greenteapress.com/wp/think-stats-2e/">available for free</a> and so I went ahead and started reading it.
Even though I was familiar with most concepts, implementing them with simple functions and data structures deepened my understanding.
</p>
</div>
</div>

<div id="outline-container-org30221e2" class="outline-2">
<h2 id="org30221e2">Org code blocks</h2>
<div class="outline-text-2" id="text-org30221e2">
<p>
One of my favourite features of Emcas is <code>org-mode</code>.
It is a markup language (arguably the best), which allows you to mix prose and code blocks.
A code block looks like this:
</p>
<pre class="example" id="org957324e">
#+BEGIN_SRC clojure
(let [vec [1 2 3]]
  (reduce + vec))
#+END_SRC
</pre>

<p>
It seems verbose to specify <code>#+BEGIN_SRC</code> and <code>#+END_SRC</code> everytime compared to, for example, markdown.
The process can be quickly automated and it is in fact a built-in feature:
just typing <code>&lt;s</code> and pressing TAB will expand the source block and move the cursor for you so that you can type the language.
Another TAB will bring the cursor inside the block.
</p>

<p>
Syntax highlighting inside the block is easy to achieve.
The big wow moment is when you realize that you can <i>execute</i> code blocks with a backend.
Cider kindly provides this backend.
When I execute my code block, CIDER will start a REPL.
</p>

<p>
Not only that, if I use <code>C-C '</code> to edit the code block, I get a temporary buffer where <code>clojure-mode</code> takes over:
</p>
<img src="../static/img/org-edit.png" alt="Editing org source blocks" style="float: left; margin-right: 10px;" />

<p>
In this screenshot I am editing this blog post in org-mode.
I am editing the source block in the right-window.
When executing it, a <code>shadow-cljs</code> nREPL server was started and org-mode seamlessly connected to the session.
I can evaluate the <code>let</code> form with CIDER and print the result in the buffer.
All of the amazing CIDER features are available (refactor, debug).
</p>

<p>
Wait for the second wow moment.. you can execute different languages in the same document.
Org mode provides the means for sharing simple data structures between languages.
What is not supplied can be achieved easily by serializing intermediate results with one language and re-loading it in another language.
Data analysis in Python, visualization in R, no context switching.
</p>

<p>
You will need to give up Pycharm and Rstudio magics, though.
Some people might consider this is a good thing.
You need to understand what Pycharm handles behind the scenes and build it (better: compose it) yourself.
In 5 years maybe there will be another IDE leading the market.
I am pretty sure <code>org-mode</code> will still be there, along with the low-level concepts you learned in the effort.
</p>

<p>
An <code>org-mode</code> file is structured in sections, or headings.
Each of these headings can have subheadings.
They can be collapsed and expanded easily by Emacs.
This is very consistent with the structure of a book.
</p>

<p>
Notes are naturally organized in sections and subsections of the book.
The python code snippets of the book can be copied, pasted and executed.
Below I can open a clojure code snippet and rewrite it.
</p>
</div>
</div>

<div id="outline-container-orgdc0090d" class="outline-2">
<h2 id="orgdc0090d">Org inline plots</h2>
<div class="outline-text-2" id="text-orgdc0090d">
<p>
Another fantastic feature of <code>org-mode</code>'s inline images.
In fact we can embed the result of a plot directly in the document.
Nowadays, with Jupyter Notebooks, this is expected and almost required.
Without much effort, I managed to embed .png files produced by <code>vega-lite</code>.
</p>

<p>
For that I am using <a href="https://github.com/behrica/vg-cli">a thin clojure wrapper</a> over <code>vg-cli</code>.
This is an example of a source block which outputs graphics:
</p>
<div class="org-src-container">
<pre class="src src-clojure">(<span class="org-keyword">defn</span> <span class="org-function-name">plot-spec</span> [spec]
  (<span class="org-type">vg</span>/vg-cli {<span class="org-clojure-keyword">:spec</span> spec <span class="org-clojure-keyword">:format</span> <span class="org-clojure-keyword">:png</span> <span class="org-clojure-keyword">:output-filename</span> <span class="org-string">"data/plots/tmp.png"</span>}))

(<span class="org-keyword">let</span> [ds   (<span class="org-type">ds</span>/-&gt;dataset <span class="org-string">"data/thinkstats/nsfg.csv"</span>)
      spec {<span class="org-clojure-keyword">:data</span>      {<span class="org-clojure-keyword">:values</span> (<span class="org-keyword">-&gt;</span> (<span class="org-type">ds</span>/filter #(== 1 (get <span class="org-variable-name">%</span> <span class="org-string">"outcome"</span>)) ds)
                                    (<span class="org-type">ds</span>/select-columns [<span class="org-string">"prglngth"</span>])
                                    (<span class="org-type">ds</span>/mapseq-reader))}
            <span class="org-clojure-keyword">:mark</span>      <span class="org-string">"bar"</span>
            <span class="org-clojure-keyword">:encoding</span>  {<span class="org-clojure-keyword">:x</span> {<span class="org-clojure-keyword">:field</span> <span class="org-string">"prglngth"</span>
                            <span class="org-clojure-keyword">:type</span>  <span class="org-string">"quantitative"</span>}
                        <span class="org-clojure-keyword">:y</span> {<span class="org-clojure-keyword">:aggregate</span> <span class="org-string">"count"</span>
                            <span class="org-clojure-keyword">:type</span>      <span class="org-string">"quantitative"</span>}}}]
  (plot-spec spec))
</pre>
</div>

<p>
As described in my previous blog post, the specification is expressed in clojure and passed to the <code>vg-cli</code>, which writes the .png to a path.
</p>

<p>
Note that the code block has certain <code>header args</code>:
</p>
<div class="org-src-container">
<pre class="src src-org">#+BEGIN_SRC clojure :results graphics file link :file ../../data/plots/tmp.png
...
</pre>
</div>
<p>
#+end_src
They set the result to be a link to the path where the plot will be saved.
</p>
</div>
</div>

<div id="outline-container-org6d61745" class="outline-2">
<h2 id="org6d61745">Clojer to metal</h2>
<div class="outline-text-2" id="text-org6d61745">
<p>
Reading this book with this setup is a lot of fun.
I usually have the .pdf open on the right and Emacs on the left.
I can focus on one topic at a time, code in both languages, quickly see some plots.
</p>

<p>
The python code often uses <code>pandas</code>, <code>numpy</code>, <code>matplotlib</code>.
I am replacing them with <code>tech.ml.dataset</code> + <code>tablecloth</code>, <code>fastmath</code> and <code>vega-lite</code> respectively.
</p>

<p>
The <code>dataset</code> abstraction in the Clojure world is better than the pandas one.
I can express myself with maps and reduce on datasets or columns.
After a groupby, I can operate on each grouped dataset.
Which is nothing more than a sequence of maps.
No series, no index, no arcane syntax.
</p>

<p>
I could implement most functions like <code>percentile</code> or <code>covariance</code> on my own.
When things get more complicated, I am relying on <code>fastmath</code>, which mostyly wraps <code>org.apache.commons.math3</code>.
So far I used it for sampling from distributions and computing the kernel density estimate.
</p>

<p>
Speaking of visualizations, <code>vega-lite</code> has really been a pleasure to use.
Plots are supposed to be simple.
You either have a bar plot, a line plot or a scatter plot.
What is on the x axis and what is on the y axis?
We usually have a sequence of maps containing <code>xs</code>, we can map functions over them to obtain <code>ys</code>, plot them.
</p>

<p>
<code>vega-lite</code> makes it also extremely easy to compose visualizations: auto-layer them, concatenate them vertically, horizontally.
This means that I can derive my building blocks as functions and very quickly compose them.
Again, not a slave of <code>matplotlib</code> APIs: subplots, xticks formatters and so on.
Visualizations as data.
</p>

<p>
Here is a snippet demonstrating <code>tablecloth</code> and <code>vega-lite</code> layers:
</p>
<div class="org-src-container">
<pre class="src src-clojure">(<span class="org-keyword">defn</span> <span class="org-function-name">weight-vs-height-mapseq</span> [ds rank]
  (<span class="org-keyword">-&gt;</span> (<span class="org-type">ds</span>/select-columns ds [<span class="org-string">"htm3"</span> <span class="org-string">"wtkg2"</span>])
      (<span class="org-type">dss</span>/drop-missing [<span class="org-string">"htm3"</span>])
      (<span class="org-type">dss</span>/select-rows (<span class="org-keyword">fn</span> [row] (<span class="org-keyword">and</span> (&gt; (row <span class="org-string">"htm3"</span>) 135) (&lt; (row <span class="org-string">"htm3"</span>) 200))))
      (<span class="org-type">dss</span>/group-by (<span class="org-keyword">fn</span> [row] (<span class="org-type">dfn</span>/round (<span class="org-type">dfn</span>// (row <span class="org-string">"htm3"</span>) 5))))
      (<span class="org-type">dss</span>/aggregate {<span class="org-clojure-keyword">:mean-height</span>       #(<span class="org-type">dfn</span>/mean (<span class="org-variable-name">%</span> <span class="org-string">"htm3"</span>))
                      <span class="org-clojure-keyword">:weight-percentile</span> #(percentile ((<span class="org-type">dss</span>/drop-missing <span class="org-variable-name">%</span> <span class="org-string">"wtkg2"</span>) <span class="org-string">"wtkg2"</span>) rank)} )
      (<span class="org-type">ds</span>/mapseq-reader)))

(<span class="org-keyword">let</span> [specs (<span class="org-keyword">for</span> [[rank color] [[25 <span class="org-string">"blue"</span>] [50 <span class="org-string">"green"</span>] [75 <span class="org-string">"red"</span>]]]
              (line-spec (weight-vs-height-mapseq brfss rank) <span class="org-clojure-keyword">:x-field</span> <span class="org-clojure-keyword">:mean-height</span> <span class="org-clojure-keyword">:y-field</span> <span class="org-clojure-keyword">:weight-percentile</span> <span class="org-clojure-keyword">:mark-color</span> color))]
  (plot-spec  {<span class="org-clojure-keyword">:layer</span> (into [] specs)}))
</pre>
</div>

<img src="../static/img/weight-vs-height.png" alt="Editing org source blocks" style="float: center" />

<p>
Apart from these super cool libraries, I am gaining confidence with the language.
I am solving problems faster, writing more idiomatic code (I like to refactor days-old code, extracting pure functions), getting comfortable with the tooling.
I like the idea that these pure functions are forever added to my toolbox, ready to be applied to other problems and domains.
</p>
</div>
</div>

<div id="outline-container-org31f3c27" class="outline-2">
<h2 id="org31f3c27">Conclusion</h2>
<div class="outline-text-2" id="text-org31f3c27">
<p>
This post has briefly touched some topics and technologies that are really interesting to me such as data science, literate programming and clojure.
I barely scratched the topic of literature programming but I was glad to experiment with one of its use cases.
I will write another post in the future which showcases some other cool features such as weaving and tangling.
I hope that somebody can learn from the approach that I shared and maybe can suggest improvements to this workflow!
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>Adding comments to the blog</title>
      <link>https://lucacambiaghi.com/posts/blog-comments.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/blog-comments.html</guid>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>The simple, privacy-focused, not bloated way</strong></p>
          
          
<div id="outline-container-orgea8dff1" class="outline-2">
<h2 id="orgea8dff1">The requirements</h2>
<div class="outline-text-2" id="text-orgea8dff1">
<p>
I spent a day trying to integrate comments on this blog.
As always, things were simple but since I am a terrible web developer I spent a lot of time figuring out how to do it.
This gave me the opportunity to learn how to debug my clojurescript web app and to learn something about React so that is good!
</p>

<p>
I wanted to add comments at the end of my posts so I could gather feedback on what I write, to know whether I helped a random stranger or if something about my process could be improved.
My requirements for the commenting system I wanted to add were the following:
</p>
<ol class="org-ol">
<li>Free: I did not want to pay a monthly fee for my small blog with few monthly pageviews</li>
<li>Lightweight: my website's load speed should not suffer</li>
<li>No ads: my readers should have no waiting time to leave a quick comment</li>
<li>No login required: as above, I don't want to require my readers to have a Disqus or Github account</li>
<li>Simple, no backend installation: I wanted to keep my simple JAMstack setup with Netlify</li>
</ol>

<p>
It is not a small list when you look at it.
The thing is that I would not accept a solution which compromised on even one of the above points.
</p>
</div>
</div>

<div id="outline-container-orge1139fe" class="outline-2">
<h2 id="orge1139fe">Good solutions</h2>
<div class="outline-text-2" id="text-orge1139fe">
<p>
The most popular solution for blogs is by far Disqus.
It is simple and free, however it is not lightweight and it has ads(!!).
They also have a bad reputation of not being privacy focused. Discarded.
</p>

<p>
One project I really liked was <a href="https://utteranc.es/">utterances</a>, which allows you to store the comments in a github repo.
It did not seem super trivial to integrate with my Reagent setup but it was a simple and elegant solution.
However, it compromised on requirement 4: you need a Github account to comment. I kept looking.
</p>

<p>
I found another interesting <a href="https://healeycodes.com/adding-comments-to-gatsby-with-netlify-and-github/">solution</a> which made us of Netlify forms and functions.
When a commenter would post a comment, it would trigger a new website build.
Comments are filtered for spam by Netlify and are stored in a JSON file on Github.
However, again, it was not simple to integrate in my setup as the Netlify functions can only be written in Javascript.
I found a good <a href="https://github.com/healeycodes/gatsby-serverless-comments">reference</a> to express functions in clojurescript and compile them and I was about to experiment to learn about serverless and lambda functions.
I liked the low-level idea of not relying on any service at all.
However, before diving into this project, I decided to try out a service which looked very simple AND respected all my requirements.
</p>
</div>
</div>

<div id="outline-container-orge91832f" class="outline-2">
<h2 id="orge91832f">The winner</h2>
<div class="outline-text-2" id="text-orge91832f">
<p>
I decided to try <a href="https://talk.hyvor.com/">Hyvor Talk</a>, they offer a similar service to Disqus but privacy-focused.
It does not look lightweight when you see a demo site but then you found out that you can load the component "on scroll" or by clicking a button. Nice!
They have a free tier, which seemed to be perfect for my use case.
</p>

<p>
The integration was quite simple: just add this piece of HTML to your blog posts and if they have a canonical URL everything will work out of the box.
Yeah, well, it is not easy with a single page application.
My blog posts are React components, where the HTML is set with the <code>dangerouslySetInnerHTML</code> function.
Fair enough, I said, I will write that piece of HTML in each of my post.
Then I found out that if the innerHTML contains a <code>&lt;script&gt;</code> tag, it will be skipped. Damn.
</p>

<p>
What I found out shortly after is that Hyvor Talk provides their own React component to embed the comments in your website!
After a bit of research I found out that <code>shadow-cljs</code> makes it extremely easy to install an existing React component and include it in your SPA!
</p>

<p>
Firs I installed the component with:
</p>
<div class="org-src-container">
<pre class="src src-sh">yarn add hyvor-talk-react
</pre>
</div>

<p>
And this is my Reagent code:
</p>
<div class="org-src-container">
<pre class="src src-clojure">(<span class="org-keyword">ns</span> <span class="org-type">app.core</span>
  (<span class="org-clojure-keyword">:require</span> [<span class="org-string">"hyvor-talk-react"</span> <span class="org-clojure-keyword">:as</span> HyvorTalk]))

(<span class="org-keyword">defn-</span> <span class="org-function-name">comments</span> [post-id]
  [<span class="org-clojure-keyword">:&gt;</span> <span class="org-type">HyvorTalk</span>/Embed {<span class="org-clojure-keyword">:websiteId</span> 123 <span class="org-clojure-keyword">:id</span> post-id <span class="org-clojure-keyword">:loadMode</span> <span class="org-string">"scroll"</span>}])
</pre>
</div>

<p>
The <code>:&gt;</code> is special Reagent syntax that allows you to easily use javascript components.
Wow, the <code>cljs</code> + <code>reagent</code> + <code>shadow-cljs</code> combo really made this process so simple!
In the process I learned something abut the philosophy of React and I understand components a bit more.
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>Vega-lite in Clojure</title>
      <link>https://lucacambiaghi.com/posts/vega-lite-clj.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/vega-lite-clj.html</guid>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>How to write visualizations as code</strong></p>
          
          
<div id="outline-container-orgbb2e594" class="outline-2">
<h2 id="orgbb2e594">Discovering Vega-lite</h2>
<div class="outline-text-2" id="text-orgbb2e594">
<p>
I am in the middle of my journey discovering Clojure and its ecosystem of libraries.
So far I have explored quite thoroughly the areas of Data Science (most notable mention: <code>tech.ml.dataset</code>) and R/Python interoperability (mentions: <code>libpython-clj</code> and <code>clojisr</code>).
The incredible developers behind these libraries often discuss about data visualization and they seem fond of one "framework" in particular, and that is Vega-Lite.
</p>

<p>
Of course, there is a particularly popular Clojure library for manipulating visualizations and that is <code>Oz</code>.
Out of curiousity, I have watched the canonical <a href="https://www.youtube.com/watch?v=9uaHRWj04D4">introductory video</a> to Vega-Lite and I was really amazed by its simplicity and power of expression.
In brief:
</p>
<ul class="org-ul">
<li>Vega is designed by following guidelines outlined in the Grammar of Graphics</li>
<li>Vega is built "on top" of <code>d3.js</code></li>
<li>Vega-lite is a "lighter" version of Vega, less verbose and with "sane defaults"</li>
</ul>

<p>
After reading about it and experimenting with it, I understand why the smart people of the Clojure community are fascinated by this library.
Consider this plot:
</p>
<div> <svg class="marks" width="350" height="247" viewBox="0 0 350 247" style="background-color: white;"><defs><style>.vega-svg-root * { fill: none; } .vega-svg-root tspan { fill: inherit; } .vega-svg-root path { stroke-miterlimit: 10; }</style></defs><g class="vega-svg-root" transform="translate(44,10)"><g class="mark-group role-frame root" role="graphics-object" aria-roledescription="group mark container"><g transform="translate(0,0)"><path class="background" aria-hidden="true" d="M0.5,0.5h300v200h-300Z" style="fill: transparent; stroke: rgb(221, 221, 221);"></path><g><g class="mark-group role-axis" aria-hidden="true"><g transform="translate(0.5,0.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" style="pointer-events: none;"></path><g><g class="mark-rule role-axis-grid" style="pointer-events: none;"><line transform="translate(0,200)" x2="300" y2="0" style="stroke: rgb(221, 221, 221); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,150)" x2="300" y2="0" style="stroke: rgb(221, 221, 221); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,100)" x2="300" y2="0" style="stroke: rgb(221, 221, 221); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,50)" x2="300" y2="0" style="stroke: rgb(221, 221, 221); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,0)" x2="300" y2="0" style="stroke: rgb(221, 221, 221); stroke-width: 1px; opacity: 1;"></line></g></g><path class="foreground" aria-hidden="true" d="" style="pointer-events: none; display: none;"></path></g></g><g class="mark-group role-axis" role="graphics-symbol" aria-roledescription="axis" aria-label="X-axis titled 'Day' for a discrete scale with 15 values: 1, 2, 3, 4, 5, ending with 15"><g transform="translate(0.5,200.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" style="pointer-events: none;"></path><g><g class="mark-rule role-axis-tick" style="pointer-events: none;"><line transform="translate(10,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(30,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(50,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(70,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(90,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(110,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(130,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(150,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(170,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(190,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(210,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(230,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(250,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(270,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(290,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line></g><g class="mark-text role-axis-label" style="pointer-events: none;"><text text-anchor="middle" transform="translate(9.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">1</text><text text-anchor="middle" transform="translate(29.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">2</text><text text-anchor="middle" transform="translate(49.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">3</text><text text-anchor="middle" transform="translate(69.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">4</text><text text-anchor="middle" transform="translate(89.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">5</text><text text-anchor="middle" transform="translate(109.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">6</text><text text-anchor="middle" transform="translate(129.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">7</text><text text-anchor="middle" transform="translate(149.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">8</text><text text-anchor="middle" transform="translate(169.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">9</text><text text-anchor="middle" transform="translate(189.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">10</text><text text-anchor="middle" transform="translate(209.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">11</text><text text-anchor="middle" transform="translate(229.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">12</text><text text-anchor="middle" transform="translate(249.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">13</text><text text-anchor="middle" transform="translate(269.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">14</text><text text-anchor="middle" transform="translate(289.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">15</text></g><g class="mark-rule role-axis-domain" style="pointer-events: none;"><line transform="translate(0,0)" x2="300" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line></g><g class="mark-text role-axis-title" style="pointer-events: none;"><text text-anchor="middle" transform="translate(150,30)" style="font-family: sans-serif; font-size: 11px; font-weight: bold; fill: rgb(0, 0, 0); opacity: 1;">Day</text></g></g><path class="foreground" aria-hidden="true" d="" style="pointer-events: none; display: none;"></path></g></g><g class="mark-group role-axis" role="graphics-symbol" aria-roledescription="axis" aria-label="Y-axis titled 'PM2.5 Value' for a linear scale with values from 0 to 400"><g transform="translate(0.5,0.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" style="pointer-events: none;"></path><g><g class="mark-rule role-axis-tick" style="pointer-events: none;"><line transform="translate(0,200)" x2="-5" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,150)" x2="-5" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,100)" x2="-5" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,50)" x2="-5" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,0)" x2="-5" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line></g><g class="mark-text role-axis-label" style="pointer-events: none;"><text text-anchor="end" transform="translate(-7,203)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">0</text><text text-anchor="end" transform="translate(-7,153)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">100</text><text text-anchor="end" transform="translate(-7,103)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">200</text><text text-anchor="end" transform="translate(-7,53)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">300</text><text text-anchor="end" transform="translate(-7,3)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">400</text></g><g class="mark-rule role-axis-domain" style="pointer-events: none;"><line transform="translate(0,200)" x2="0" y2="-200" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line></g><g class="mark-text role-axis-title" style="pointer-events: none;"><text text-anchor="middle" transform="translate(-27.701492309570312,100) rotate(-90) translate(0,-2)" style="font-family: sans-serif; font-size: 11px; font-weight: bold; fill: rgb(0, 0, 0); opacity: 1;">PM2.5 Value</text></g></g><path class="foreground" aria-hidden="true" d="" style="pointer-events: none; display: none;"></path></g></g><g class="mark-rect role-mark layer_0_layer_0_marks" role="graphics-object" aria-roledescription="rect mark container"><path aria-label="Day: 1; Value: 54.8" role="graphics-symbol" aria-roledescription="bar" d="M1,172.6h18v27.400000000000006h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 2; Value: 112.1" role="graphics-symbol" aria-roledescription="bar" d="M21,143.95h18v56.05000000000001h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 3; Value: 63.6" role="graphics-symbol" aria-roledescription="bar" d="M41,168.2h18v31.80000000000001h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 4; Value: 37.6" role="graphics-symbol" aria-roledescription="bar" d="M61,181.20000000000002h18v18.799999999999983h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 5; Value: 79.7" role="graphics-symbol" aria-roledescription="bar" d="M81,160.15h18v39.849999999999994h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 6; Value: 137.9" role="graphics-symbol" aria-roledescription="bar" d="M101,131.05h18v68.94999999999999h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 7; Value: 120.1" role="graphics-symbol" aria-roledescription="bar" d="M121,139.95000000000002h18v60.04999999999998h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 8; Value: 103.3" role="graphics-symbol" aria-roledescription="bar" d="M141,148.35h18v51.650000000000006h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 9; Value: 394.8" role="graphics-symbol" aria-roledescription="bar" d="M161,2.6000000000000023h18v197.4h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 10; Value: 199.5" role="graphics-symbol" aria-roledescription="bar" d="M181,100.25h18v99.75h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 11; Value: 72.3" role="graphics-symbol" aria-roledescription="bar" d="M201,163.85h18v36.150000000000006h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 12; Value: 51.1" role="graphics-symbol" aria-roledescription="bar" d="M221,174.45h18v25.55000000000001h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 13; Value: 112" role="graphics-symbol" aria-roledescription="bar" d="M241,144h18v56h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 14; Value: 174.5" role="graphics-symbol" aria-roledescription="bar" d="M261,112.75h18v87.25h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 15; Value: 130.5" role="graphics-symbol" aria-roledescription="bar" d="M281,134.75h18v65.25h-18Z" style="fill: rgb(76, 120, 168);"></path></g><g class="mark-rect role-mark layer_0_layer_1_marks" role="graphics-object" aria-roledescription="rect mark container"><path aria-label="Day: 9; PM2.5 Value: 300; Value: 394.8" role="graphics-symbol" aria-roledescription="bar" d="M161,2.6000000000000023h18v47.4h-18Z" style="fill: rgb(228, 87, 85);"></path></g><g class="mark-rule role-mark layer_1_layer_0_marks" role="graphics-symbol" aria-roledescription="rule mark container"><line transform="translate(300,50)" x2="-300" y2="0" style="stroke: black;"></line></g><g class="mark-text role-mark layer_1_layer_1_marks" role="graphics-object" aria-roledescription="text mark container"><text text-anchor="end" transform="translate(298,46)" style="font-family: sans-serif; font-size: 11px; fill: black;">hazardous</text></g></g><path class="foreground" aria-hidden="true" d="" style="display: none;"></path></g></g></g></svg> </div>

<p>
This is the plot specification, described in JSON:
</p>
<div class="org-src-container">
<pre class="src src-js">{
  <span class="org-string">"$schema"</span>: <span class="org-string">"https://vega.github.io/schema/vega-lite/v4.json"</span>,
  <span class="org-string">"description"</span>: <span class="org-string">"The PM2.5 value of Beijing observed 15 days, highlighting the days when PM2.5 level is hazardous to human health. Data source https://chartaccent.github.io/chartaccent.html"</span>,
    <span class="org-string">"layer"</span>: [{
      <span class="org-string">"data"</span>: {
        <span class="org-string">"values"</span>: [
          {<span class="org-string">"Day"</span>: 1, <span class="org-string">"Value"</span>: 54.8},
          {<span class="org-string">"Day"</span>: 2, <span class="org-string">"Value"</span>: 112.1},
          {<span class="org-string">"Day"</span>: 3, <span class="org-string">"Value"</span>: 63.6},
          {<span class="org-string">"Day"</span>: 4, <span class="org-string">"Value"</span>: 37.6},
          {<span class="org-string">"Day"</span>: 5, <span class="org-string">"Value"</span>: 79.7},
          {<span class="org-string">"Day"</span>: 6, <span class="org-string">"Value"</span>: 137.9},
          {<span class="org-string">"Day"</span>: 7, <span class="org-string">"Value"</span>: 120.1},
          {<span class="org-string">"Day"</span>: 8, <span class="org-string">"Value"</span>: 103.3},
          {<span class="org-string">"Day"</span>: 9, <span class="org-string">"Value"</span>: 394.8},
          {<span class="org-string">"Day"</span>: 10, <span class="org-string">"Value"</span>: 199.5},
          {<span class="org-string">"Day"</span>: 11, <span class="org-string">"Value"</span>: 72.3},
          {<span class="org-string">"Day"</span>: 12, <span class="org-string">"Value"</span>: 51.1},
          {<span class="org-string">"Day"</span>: 13, <span class="org-string">"Value"</span>: 112.0},
          {<span class="org-string">"Day"</span>: 14, <span class="org-string">"Value"</span>: 174.5},
          {<span class="org-string">"Day"</span>: 15, <span class="org-string">"Value"</span>: 130.5}
        ]
      },
      <span class="org-string">"layer"</span>: [{
        <span class="org-string">"mark"</span>: <span class="org-string">"bar"</span>,
        <span class="org-string">"encoding"</span>: {
          <span class="org-string">"x"</span>: {<span class="org-string">"field"</span>: <span class="org-string">"Day"</span>, <span class="org-string">"type"</span>: <span class="org-string">"ordinal"</span>, <span class="org-string">"axis"</span>: {<span class="org-string">"labelAngle"</span>: 0}},
          <span class="org-string">"y"</span>: {<span class="org-string">"field"</span>: <span class="org-string">"Value"</span>, <span class="org-string">"type"</span>: <span class="org-string">"quantitative"</span>}
        }
      }, {
        <span class="org-string">"mark"</span>: <span class="org-string">"bar"</span>,
        <span class="org-string">"transform"</span>: [
          {<span class="org-string">"filter"</span>: <span class="org-string">"datum.Value &gt;= 300"</span>},
          {<span class="org-string">"calculate"</span>: <span class="org-string">"300"</span>, <span class="org-string">"as"</span>: <span class="org-string">"baseline"</span>}
        ],
        <span class="org-string">"encoding"</span>: {
          <span class="org-string">"x"</span>: {<span class="org-string">"field"</span>: <span class="org-string">"Day"</span>, <span class="org-string">"type"</span>: <span class="org-string">"ordinal"</span>},
          <span class="org-string">"y"</span>: {<span class="org-string">"field"</span>: <span class="org-string">"baseline"</span>, <span class="org-string">"type"</span>: <span class="org-string">"quantitative"</span>, <span class="org-string">"title"</span>: <span class="org-string">"PM2.5 Value"</span>},
          <span class="org-string">"y2"</span>: {<span class="org-string">"field"</span>: <span class="org-string">"Value"</span>},
          <span class="org-string">"color"</span>: {<span class="org-string">"value"</span>: <span class="org-string">"#e45755"</span>}
        }
      }
    ]}, {
      <span class="org-string">"data"</span>: {
         <span class="org-string">"values"</span>: [{}]
      },
      <span class="org-string">"encoding"</span>: {
        <span class="org-string">"y"</span>: {<span class="org-string">"datum"</span>: 300}
      },
      <span class="org-string">"layer"</span>: [{
        <span class="org-string">"mark"</span>: <span class="org-string">"rule"</span>
      }, {
        <span class="org-string">"mark"</span>: {
          <span class="org-string">"type"</span>: <span class="org-string">"text"</span>,
          <span class="org-string">"align"</span>: <span class="org-string">"right"</span>,
          <span class="org-string">"baseline"</span>: <span class="org-string">"bottom"</span>,
          <span class="org-string">"dx"</span>: -2,
          <span class="org-string">"dy"</span>: -2,
          <span class="org-string">"x"</span>: <span class="org-string">"width"</span>,
          <span class="org-string">"text"</span>: <span class="org-string">"hazardous"</span>
        }
      }]
    }
  ]
}
</pre>
</div>

<p>
It is not the simplest example but I think it speaks great of Vega-Lite expressiveness.
The visualization is divided in two layers and each layer has two sublayers:
</p>
<ul class="org-ul">
<li>The first layer has simple data associated with it, with the fields "Day" and "Value"
<ul class="org-ul">
<li>The first sublayer has a mark specifying a "bar" plot</li>
<li>The field "Day" is encoded to the x axis and "Value" to the y axis</li>
<li>The second sublayer is another bar mark with defines transforms:
<ul class="org-ul">
<li>Data below 300 is filtered and 300 is defined as baseline</li>
<li>In the encoding there is y, which is the defined baseline</li>
<li>There is also y2, which is the values above 300 that we filtered, colored of red</li>
</ul></li>
</ul></li>
<li>The second layer has no data but a fixed y encoding to 300
<ul class="org-ul">
<li>The first sublayer has mark "rule", which draws an horizontal line in y</li>
<li>The second sublayer has mark "text" and the options describe positioning</li>
</ul></li>
</ul>

<p>
I really like this way of composing a visualization.
It is very simple to express the components and quite intuitive how to layer them together.
</p>
</div>
</div>

<div id="outline-container-org6d75386" class="outline-2">
<h2 id="org6d75386">Oz</h2>
<div class="outline-text-2" id="text-org6d75386">
<p>
Well, Vega-lite is nothing new, might not be so exciting for the majority of people.
What makes it extremely interesting for me is that it has something in common with Clojure: this visualization spec is just data.
Instead of JSON, it can be represented in YAML or EDN. In fact, it's nothing more than a map of vectors and maps.
</p>

<p>
The library called <code>Oz</code> allows us to define a Vega-Lite spec in Clojure, it compiles it to vega and renders it in a browser with minimal effort.
It even allows us to export the plot to a self-contained HTML using the javascript library <code>vega-embed</code>.
</p>

<p>
Consider this neat code found in the repo's README:
</p>
<div class="org-src-container">
<pre class="src src-clojure">(<span class="org-keyword">ns</span> <span class="org-type">org.core</span>
  (<span class="org-clojure-keyword">:require</span> [oz.core <span class="org-clojure-keyword">:as</span> oz]))

(<span class="org-keyword">defn</span> <span class="org-function-name">play-data</span> [&amp; names]
  (<span class="org-keyword">for</span> [n names
        i (range 20)]
    {<span class="org-clojure-keyword">:time</span> i <span class="org-clojure-keyword">:item</span> n <span class="org-clojure-keyword">:quantity</span> (+ (<span class="org-type">Math</span>/pow (* i (count n)) 0.8) (rand-int (count n)))}))

(<span class="org-keyword">def</span> <span class="org-variable-name">line-plot</span>
  {<span class="org-clojure-keyword">:data</span>     {<span class="org-clojure-keyword">:values</span> (play-data <span class="org-string">"monkey"</span> <span class="org-string">"slipper"</span> <span class="org-string">"broom"</span>)}
   <span class="org-clojure-keyword">:encoding</span> {<span class="org-clojure-keyword">:x</span>     {<span class="org-clojure-keyword">:field</span> <span class="org-string">"time"</span> <span class="org-clojure-keyword">:type</span> <span class="org-string">"quantitative"</span>}
              <span class="org-clojure-keyword">:y</span>     {<span class="org-clojure-keyword">:field</span> <span class="org-string">"quantity"</span> <span class="org-clojure-keyword">:type</span> <span class="org-string">"quantitative"</span>}
              <span class="org-clojure-keyword">:color</span> {<span class="org-clojure-keyword">:field</span> <span class="org-string">"item"</span> <span class="org-clojure-keyword">:type</span> <span class="org-string">"nominal"</span>}}
   <span class="org-clojure-keyword">:mark</span>     <span class="org-string">"line"</span>})

(<span class="org-type">oz</span>/export! line-plot <span class="org-string">"public/html/line.html"</span>)
</pre>
</div>

<p>
Here 3 random time series are generated, encoded in the most obvious, concise, simple way and the result is what you would expect:
</p>
<iframe src="../static/html/line.html" style="overflow:visible;min-height:300px;height:100%;width:100%;padding:20px" scrolling="no" border="none" width="100%" height="100%" marginheight="0" frameborder="0"></iframe>

<p>
What I love about this example is that you work with raw, naked data.
There is no class, no weird API syntax or function kwargs to memorize.
</p>
</div>
</div>

<div id="outline-container-org0b6601a" class="outline-2">
<h2 id="org0b6601a">Blog development:</h2>
<div class="outline-text-2" id="text-org0b6601a">
<p>
Anoter interesting learning I had was how to embed Vega into this blog!
Because I don't know enough about web development, it took me way more than it should have.
Actually, it was really easy since you can just write plain HTML in markdown and that will be correctly parsed by <code>markdown.core</code> and <code>reagent</code>.
</p>

<p>
When taking a compiled Vega spec, I can just put the SVG in a div tag.
When exporting it from Clojure, I can put the HTML file in an iframe.
It is just a bit annoying that this does not resize automatically but I can control it with the CSS attribute <code>min-height</code> and set it to the height I specify in Vega-lite.
</p>

<p>
Oz also has a facility to render a Reagent component directly from Clojure.
At the moment I am not using it as my blog posts are written in markdown/HTML, I could use it to populate another page of the website.
</p>

<p>
As a final cherry on top, writing my blog in Org mode has already shown its value.
Executing <code>yarn develop</code> starts the <code>shadow-cljs</code> server which will watch for changed files.
At the same time it will expose a Clojure REPL that I can connect to in order to execute my org src blocks.
When I am satisfied, I can just export to markdown and see the blog post reloading.
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
    <item>
      <title>New website!</title>
      <link>https://lucacambiaghi.com/posts/new-website.html</link>
      <author>Luca Cambiaghi</author>
      <guid isPermaLink="false">https://lucacambiaghi.com/posts/new-website.html</guid>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <description>
        <![CDATA[
          <p><strong>Why and how I set up my personal website</strong></p>
          
          
<div id="outline-container-org2034659" class="outline-2">
<h2 id="org2034659">The problem</h2>
<div class="outline-text-2" id="text-org2034659">
<p>
I have always wanted a personal website. I have attempted several times at creating one.
The first function a personal website should serve is showcase your achievements, e.g. your former experience and projects.
The second function I have always seeked from my website is technical blogging.
Moreover, I wanted my website to be hosted for free, without any limitations.
</p>

<p>
In regards to blogging, I wanted to do it in the simplest way. Not too simple though, as Einstein said:
</p>

<blockquote>
<p>
Everything should be made as simple as possible,
but not any simpler &#x2014;Albert Einstein
</p>
</blockquote>

<p>
In my previous attempts at building a website I never reached that sweet spot: things were either too complex or too simple.
In this blog post I explain what brought me to this point.
</p>
</div>
</div>

<div id="outline-container-org5562a78" class="outline-2">
<h2 id="org5562a78">Previous approaches</h2>
<div class="outline-text-2" id="text-org5562a78">
<p>
A popular approach is to host a static website on Github Pages with Ruby+Jekyll.
Github recently made this very easy with the <a href="https://github.com/github/personal-website">personal website project</a>.
I tried twice that approach because of how easy and fast it is to set up.
</p>

<p>
The first time I set up a simple website was few years ago and I did it with a minimal Jekyll template to showcase my github projects and my skills.
I had a page where I could easily write blog posts in <code>.md</code> files, placing the posts in a certain folder structure with a certain filename.
Simple enough, right? Maybe too simple. I could not easily control the website template. I had to write my posts in <code>markdown</code> files.
I quickly lost interest in the website and never blogged once.
</p>

<p>
The second time around was at the beginning of 2020, shortly after discovering Emacs.
I saw a beautiful blog online and made it a day's quest to replicate it on my <code>gh-pages</code> branch.
What the author was using was an R library called <code>rmarkdown</code>, which under the hood uses <code>knitr</code> + <code>pandoc</code> to render <code>.Rmd</code> files.
The final touch I added was so I could write posts using my favourite markup language, i.e. Org Mode.
I could write <code>.org</code> files, export them to <code>.Rmd</code> files and finally render them with <code>rmarkdown</code>.
The website's style was stunning also! Very easy to steal some CSS from his website.
</p>

<p>
I could blog writing <code>.org</code> files and I had a beautiful website.. Still I never blogged once. Maybe it was not simple enough.
The setup must have been working very well for its original author, a Data Scientist writing a lot of <code>.Rmd</code> analyses. Not so much for me.
</p>
</div>
</div>

<div id="outline-container-org0dfff07" class="outline-2">
<h2 id="org0dfff07">This approach</h2>
<div class="outline-text-2" id="text-org0dfff07">
<p>
Lately I have been very fascinated by the Clojure programming language. I will write a post in the future about it.
In the websites I am lurking, the community often speaks about Clojurescript which can compile to Javascript code.
Some of the <code>cljs</code> frameworks for simple-page applications seem simple and elegant (like most things Clojure related).
</p>

<p>
Today I found a minimal, beautiful blog set up with <code>shadow-cljs</code>, which had very little code, all of which was understandable enough.
It looks like the author is a <code>js</code> and <code>cljs</code> developer, so it has been interesting to learn some best practices since I have absolutely zero knowledge of frontend development.
</p>

<p>
Well, I forked his repo and it was extremely quick to build the website locally and deploy it to netlify!
New concepts I need to understand more:
</p>
<ul class="org-ul">
<li><code>yarn</code> &gt; <code>npm</code> for managing dependencies, building and releasing</li>
<li><code>tailwind</code> + <code>postcss</code> for easy customization of your website's style</li>
<li><code>yarn shadow-cljs watch app</code> to develop while hot-reloading the website a-la-figwheel</li>
<li>Connecting to the <code>clojurescript</code> REPL to interact with the browser</li>
</ul>

<p>
This is a very exciting environment to develop my website and customize it to my liking! No more deciphering templates and stealing off CSS, I will customize it how I want.
</p>

<p>
The second news, even more exciting, is that the author wrote a simple logic to parse <code>.md</code> and populate the website.
This means that to write my blog posts I can write with Org Mode and easily export to <code>.md</code>.
I will also adopt the approach used in <code>ox-hugo</code>, that is to have a single <code>.org</code> file and have posts live under a heading.
I can then export a single post with <code>,e C-s mm</code>, i.e. calling <code>org-export-dispatch</code>, narrowing the scope to the subtree and exporting to a markdown file.
</p>

<p>
I really like having the full control over the website. Deploying to netlify means that I am not limited to what Github Pages lets me do.
In the future I would like to explore different things, like embedding an interactive <code>D3</code> visualization or a <code>vega-lite</code> SVG.
I am happy to <b>need</b> to understand the details for these integrations instead of resorting to a magical plugin in an obscure template (like with <code>hugo</code>).
</p>
</div>
</div>

<div id="outline-container-org71b2be4" class="outline-2">
<h2 id="org71b2be4">Why blogging?</h2>
<div class="outline-text-2" id="text-org71b2be4">
<p>
Technical blogging is a great opportunity to learn how to explain something you <span class="underline">think</span> you know something about and how to organise your thoughts.
Before writing this post I thought I had a clear idea of what to write but at the end of the post I can see that I digressed and I could have benefitted from organizing the structure of the post beforehand.
It's okay since it is my first post, but see? Already learning!
</p>

<p>
In the future I plan to write about the things I deem interesting that I am exploring.
I do this for self documentation and to maybe help a fellow user who might come across the same problem I was solving and maybe it will help him save some time.
I will adjust with time around a certain size and type of content. I expect the two main categories will be data science and software engineering tooling.
</p>
</div>
</div>

        ]]>
      </description>
    </item>
    
  </channel>
</rss>
